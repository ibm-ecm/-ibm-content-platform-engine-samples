##  Licensed Materials - Property of IBM (c) Copyright IBM Corp. 2024 All Rights Reserved.
## 
##  US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with
##  IBM Corp.
## 
##  DISCLAIMER OF WARRANTIES :
## 
##  Permission is granted to copy and modify this Sample code, and to distribute modified versions provided that both the
##  copyright notice, and this permission notice and warranty disclaimer appear in all copies and modified versions.
## 
##  THIS SAMPLE CODE IS LICENSED TO YOU AS-IS. IBM AND ITS SUPPLIERS AND LICENSORS DISCLAIM ALL WARRANTIES, EITHER
##  EXPRESS OR IMPLIED, IN SUCH SAMPLE CODE, INCLUDING THE WARRANTY OF NON-INFRINGEMENT AND THE IMPLIED WARRANTIES OF
##  MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL IBM OR ITS LICENSORS OR SUPPLIERS BE LIABLE FOR
##  ANY DAMAGES ARISING OUT OF THE USE OF OR INABILITY TO USE THE SAMPLE CODE, DISTRIBUTION OF THE SAMPLE CODE, OR
##  COMBINATION OF THE SAMPLE CODE WITH ANY OTHER CODE. IN NO EVENT SHALL IBM OR ITS LICENSORS AND SUPPLIERS BE LIABLE
##  FOR ANY LOST REVENUE, LOST PROFITS OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE
##  DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, EVEN IF IBM OR ITS LICENSORS OR SUPPLIERS HAVE
##  BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"An interface that represents an access permission through a bitmask of access rights."
interface AccessPermission {
  accessMask: Int
  accessType: AccessType
  className: String!
  granteeName: String
  granteeType: SecurityPrincipalType
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"Describes an access level or right."
interface AccessPermissionDescription {
  accessMask: Int
  className: String!
  descriptiveText: String
  displayName: String
  permissionType: AccessPermissionTypeEnum
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface that represents the fields for an action."
interface Action {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  progId: String
  properties(includes: [String!]): [CommonProperty!]!
  scriptText: String
  updateSequenceNumber: Int!
}

"An interface that represents the fields for an action consumer."
interface ActionConsumer {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"Represents a product extension to the core FileNet P8 Content Engine components."
interface AddOn {
  accessAllowed: Int!
  addOnType: AddOnTypeEnum
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  objectReference: ObjectReference!
  prerequisites: [ID!]
  properties(includes: [String!]): [CommonProperty!]!
  scriptType: String
  supersededAddOnIds: [ID!]
  updateSequenceNumber: Int!
}

"An annotation object that can be applied to a document, folder, or custom object."
interface Annotation {
  accessAllowed: Int!
  annotatedContentElement: Int
  annotatedObject: Containable
  className: String!
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  contentElements: [ContentElement!]
  contentElementsPresent: [String!]
  contentSize: Float
  creator: String
  creatorUser: User
  dateContentLastAccessed: DateTime
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  id: ID!
  indexationId: ID
  lastModifier: String
  lastModifierUser: User
  mimeType: String
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"""
An interface that represents a single choice item in a choice list that can be assigned to a property, or represents a group node for a nested collection of choice items within a choice list.

A choice item is a single possible value, or choice, in a choice list.

A choice item can be of two possible types: integer or string. An integer-type choice item holds a single integer value and can be assigned only to an integer-valued property. A string-type choice item holds a single string value and can be assigned only to a string-valued property.
"""
interface Choice {
  choiceIntegerValue: Int
  choiceStringValue: String
  choiceType: ChoiceTypeEnum
  choiceValues: [Choice!]
  className: String!
  displayName: String
  displayNames: [LocalizedStringType!]!
  id: ID!
  name: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"""
An interface that represents a choice list in an object store.

Each choice list contains a list collection of Choice objects that, when associated with a property, provides a discrete set of possible values that the property can hold.

By using a choice list, you can enforce restrictions on property values.
"""
interface ChoiceList {
  accessAllowed: Int!
  choiceValues: [Choice!]
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  hasHierarchy: Boolean
  id: ID!
  installedByAddOn: AddOn
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"An interface for class definition (mutable class metadata) of non-versionable, non-subscribable classes."
interface ClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"An interface that represents the fields for a class subscription."
interface ClassSubscription {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eventAction: EventAction!
  filterExpression: String
  filteredPropertyId: String
  id: ID!
  includeSubclassesRequested: Boolean
  isEnabled: Boolean
  isSynchronous: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subscribedEvents: [SubscribedEvent!]!
  subscriptionTarget: SubscribableClassDefinition!
  updateSequenceNumber: Int!
  userString: String
}

"Represents the base interface for any type of permission for an object."
interface CmAbstractPermission {
  className: String!
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"""
An interface that represents a customizable base for classes of objects that can provide basic subscribable and replicable independently persistable behavior.

Typically the application must subclass CmAbstractPersistable to create a concrete root class with customizable properties, and to use to create instances for that class of objects.

For example, a customer can have LastName, FirstName, PhoneNumber, Addresses, Email.
"""
interface CmAbstractPersistable {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"An interface that represents an extended permission that defines delegation of rights from a user or group to another user or group."
interface CmDelegatedAccessPermission {
  accessMask: Int
  className: String!
  delegateName: String
  delegateType: SecurityPrincipalType
  delegatingUserName: String
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"Abstract interface for all extended permissions."
interface CmExtendedPermission {
  className: String!
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface for an object to which holds (deletion prevention) can be applied."
interface CmHoldable {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"This interface represents a Local Group"
interface CmLocalGroup {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  groupMembers: [CmLocalGroupMemberType!]
  "The symbolic name of the local group"
  groupName: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  "Returns the realm group associated with this local group object."
  realmGroup: Group
  updateSequenceNumber: Int!
}

"This interface represents a managed user."
interface CmManagedUser {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateConfirmed: DateTime
  dateCreated: DateTime
  dateLastActive: DateTime
  dateLastModified: DateTime
  displayName: String
  email: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  managedUserStatus: ManagedUserStatus
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
  "Returns the realm user associated with the managed user object."
  realmUser: User
  updateSequenceNumber: Int!
}

"The base interface for a role."
interface CmRole {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  id: ID!
  isCallerInRole: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"An interface for class definition (mutable class metadata) of classes which are a sub-class of CmRole."
interface CmRoleClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  auditDefinitions: [AuditDefinitionType!]
  changePreprocessorDefinitions: [CmChangePreprocessorDefinitionType!]
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  roleAccessDefinitions: [CmRoleAccessDefinitionType!]
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"An interface that represents an extended permission that grants access through a CmRole."
interface CmRolePermission {
  className: String!
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
  role: CmRole
}

"An interface that represents a thumbnail image corresponding to a ContentElement of a Document."
interface CmThumbnail {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  elementSequenceNumber: Int
  id: ID!
  image: HexString
  imageByteCount: Int
  inputDocument: Document
  isSystemGenerated: Boolean
  lastModifier: String
  lastModifierUser: User
  mimeType: String
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"An interface that represents the fields common to any type of property."
interface CommonProperty {
  "Alias is ordinarily the same as Id.  If contained in a RepositoryRow, it might be a user supplied alias."
  alias: String!
  cardinality: Cardinality!
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"Represents the base interface for all objects that can be contained."
interface Containable {
  annotations: AnnotationSet
  className: String!
  containers: ReferentialContainmentRelationshipSet
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  name: String
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
}

"""
An interface that represents a containment relationship.

These can be either ReferentialContainmentRelationship or DynamicReferentialContainmentRelationship objects.
"""
interface ContainmentRelationship {
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  head: Containable!
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  properties(includes: [String!]): [CommonProperty!]!
  tail: Folder!
}

"An interface used to access document or annotation content data."
interface ContentElement {
  className: String!
  contentType: String!
  elementSequenceNumber: Int!
  properties(includes: [String!]): [CommonProperty!]!
}

"""
An interface for external content data that exists outside of an object store (and therefore outside the control of the Content Engine server), but to which an object store maintains a reference.

The URL of the resource that contains the content data is stored in the contentLocation field.
"""
interface ContentReference {
  className: String!
  contentLocation: String
  contentType: String!
  elementSequenceNumber: Int!
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface that represents content data that is local to an object store and directly managed by the Content Engine server."
interface ContentTransfer {
  className: String!
  contentSize: Float
  contentType: String!
  downloadUrl: String
  elementSequenceNumber: Int!
  properties(includes: [String!]): [CommonProperty!]!
  retrievalName: String
}

"""
An interface that represents a general type of object that can be subclassed.

A CustomObject object has no inherent semantics, but is independently securable and can be persisted to an object store.
"""
interface CustomObject {
  accessAllowed: Int!
  annotations: AnnotationSet
  className: String!
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  containers: ReferentialContainmentRelationshipSet
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  indexationId: ID
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  securityFolder: Folder
  updateSequenceNumber: Int!
}

"An interface that represents objects that are dependent. A DependentObject represents an EngineObject that can only exist within the scope of another object."
interface DependentObject {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"Base interface for permission objects that define discretionary access permissions."
interface DiscretionaryPermission {
  accessType: AccessType
  className: String!
  granteeName: String
  granteeType: SecurityPrincipalType
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"""
An interface that represents a single version of a document stored in a content repository.

In addition to being versionable, a Document object can be subclassed and can carry content, which is stored in one or more content elements.
"""
interface Document {
  accessAllowed: Int!
  annotations: AnnotationSet
  childDocuments: DocumentSet
  className: String!
  classificationStatus: DocClassificationStatus
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  cmThumbnails: CmThumbnailSet
  compoundDocumentState: CompoundDocumentState
  containers: ReferentialContainmentRelationshipSet
  contentElements: [ContentElement!]
  contentElementsPresent: [String!]
  contentRetentionDate: DateTime
  contentSize: Float
  creator: String
  creatorUser: User
  currentState: String
  currentVersion: Document
  dateCheckedIn: DateTime
  dateContentLastAccessed: DateTime
  dateCreated: DateTime
  dateLastModified: DateTime
  foldersFiledIn: FolderSet
  id: ID!
  indexationId: ID
  isCurrentVersion: Boolean
  isFrozenVersion: Boolean
  isInExceptionState: Boolean
  isReserved: Boolean
  isVersioningEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  majorVersionNumber: Int
  mimeType: String
  minorVersionNumber: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  parentDocuments: DocumentSet
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  releasedVersion: Document
  reservation: Document
  reservationType: ReservationType
  securityFolder: Folder
  updateSequenceNumber: Int!
  versionSeries: VersionSeries!
  versionStatus: VersionStatus
  versions: DocumentSet
}

"""
An interface that represents a dynamic relationship between two Containable subclasses: a container and the current version of a Document.

The object-valued head and tail properties express the relationship. The tail always references a Folder (the container), while the head references the current version of a Document.
"""
interface DynamicReferentialContainmentRelationship {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  containmentName: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  head: Containable!
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  tail: Folder!
  updateSequenceNumber: Int!
  versionSeries: VersionSeries!
}

"An interface that represents the external event action."
interface EevExternalEventAction {
  accessAllowed: Int!
  className: String!
  cmTransactionTimeout: Int
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eevExternalEventReceiverURL: String
  eevReceiverRegistrationIdentifier: String
  id: ID!
  isEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  progId: String
  properties(includes: [String!]): [CommonProperty!]!
  scriptText: String
  subscriptions: SubscriptionSet!
  updateSequenceNumber: Int!
}

"An interface that represents the Webhook external event action."
interface EevWebhookExternalEventAction {
  accessAllowed: Int!
  className: String!
  cmTransactionTimeout: Int
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eevExternalEventReceiverURL: String
  eevReceiverRegistrationIdentifier: String
  id: ID!
  isEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  progId: String
  properties(includes: [String!]): [CommonProperty!]!
  scriptText: String
  subscriptions: SubscriptionSet!
  updateSequenceNumber: Int!
}

"An interface that represents the fields for an event action."
interface EventAction {
  accessAllowed: Int!
  className: String!
  cmTransactionTimeout: Int
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  id: ID!
  isEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  progId: String
  properties(includes: [String!]): [CommonProperty!]!
  scriptText: String
  subscriptions: SubscriptionSet!
  updateSequenceNumber: Int!
}

"An interface for class definition (mutable class metadata) of event classes for which instances can be subscribed to or audited."
interface EventClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"""
An interface that represents a container that can hold other Containable subclasses, but cannot have content data of its own.

A folder can have many child folders, but a child folder can have only one parent folder.

At the top of the container hierarchy is an automatically-created root folder.

Folders are not versionable.
"""
interface Folder {
  accessAllowed: Int!
  annotations: AnnotationSet
  className: String!
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  containedDocuments: DocumentSet
  containees: ReferentialContainmentRelationshipSet
  containers: ReferentialContainmentRelationshipSet
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  indexationId: ID
  inheritParentPermissions: Boolean
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  parent: Folder
  pathName: String
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subFolders: FolderSet
  updateSequenceNumber: Int!
}

"An interface to represent an EngineObject along with its class name and properties."
interface GenericObject {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface that represents a group of users."
interface Group {
  className: String!
  "Applicable only if the group is in a Local type realm. Returns the CmLocalGroup associated with this group."
  cmLocalGroup: CmLocalGroup
  displayName: String
  distinguishedName: String
  groups: GroupSet
  id: String
  memberOfGroups: GroupSet
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
  shortName: String
  users: UserSet
}

"An interface of IndependentObject represents an EngineObject that has its own independent identity, class name, and properties."
interface IndependentObject {
  className: String!
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface that represents a persistable IndependentObject that you can directly create, update, and delete."
interface IndependentlyPersistableObject {
  accessAllowed: Int!
  className: String!
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"An interface that represents the fields for an instance subscription."
interface InstanceSubscription {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eventAction: EventAction!
  filterExpression: String
  filteredPropertyId: String
  id: ID!
  isEnabled: Boolean
  isSynchronous: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subscribedEvents: [SubscribedEvent!]!
  subscriptionTarget: Subscribable!
  updateSequenceNumber: Int!
  userString: String
}

"An interface for object classes metadata (class descriptions and property descriptions)."
interface Metadata {
  descriptiveText: String
  displayName: String!
}

"An interface that represents the fields for an object subscription."
interface ObjectSubscription {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eventAction: EventAction!
  filterExpression: String
  filteredPropertyId: String
  id: ID!
  isEnabled: Boolean
  isSynchronous: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subscribedEvents: [SubscribedEvent!]!
  updateSequenceNumber: Int!
  userString: String
}

"An interface that represents any type of permission for an object."
interface Permission {
  className: String!
  granteeName: String
  granteeType: SecurityPrincipalType
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"This interface represents a base class for objects describing permissions."
interface PermissionDescription {
  className: String!
  descriptiveText: String
  displayName: String
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface that represents the base class for all property definition classes."
interface PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"""
An interface for a property description.

A property description holds immutable metadata that describes a specific object class property.
Each property description further corresponds to a specific property data type.
"""
interface PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"""
Represents the base class for all property template classes.
A property template is a global template that enables you to create one or more property definitions for a given data type with the same set of property values.
"""
interface PropertyTemplate {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDisplayCategory: String
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"This interface represents a Realm"
interface Realm {
  className: String!
  id: ID!
  name: String
  objectReference: ObjectReference!
  principalCategory: String
  properties(includes: [String!]): [CommonProperty!]!
  realmDirectoryType: RealmDirectoryTypeEnum
  symbolicName: String
}

"""
An interface that represents a static relationship between two Containable subclasses: a container and a containee.

The object-valued head and tail express the relationship. The tail always references a Folder (the container), while the head references the containee: another Containable subclass (such as another Folder, a Document, or a CustomObject).

When the head is a Document object, it represents a specific document version.
"""
interface ReferentialContainmentRelationship {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  containmentName: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  head: Containable!
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  tail: Folder!
  updateSequenceNumber: Int!
}

"An interface that represents a relationship between independently persistable objects."
interface Relationship {
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  properties(includes: [String!]): [CommonProperty!]!
  tail: Folder!
}

"This interface is the base for subinterfaces representing classes of which an object instance can be replicated."
interface Replicable {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface for class definition (mutable class metadata) of classes of which an object instance can be replicated."
interface ReplicableClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  auditDefinitions: [AuditDefinitionType!]
  changePreprocessorDefinitions: [CmChangePreprocessorDefinitionType!]
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"This interface is the base for subinterfaces representing Content Engine object store repositories and repositories that are external to the Content Engine server."
interface Repository {
  accessAllowed: Int!
  className: String!
  displayName: String
  id: ID!
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"An interface that represents a security principal (Group or User objects)."
interface SecurityPrincipal {
  className: String!
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
}

"Subscribable is a base interface of several derived interfaces that can be used as a subscription target."
interface Subscribable {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"An interface for class definition (mutable class metadata) of classes for which instances can be the target of a subscription and can be audited."
interface SubscribableClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  auditDefinitions: [AuditDefinitionType!]
  changePreprocessorDefinitions: [CmChangePreprocessorDefinitionType!]
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"Represents the description of a Content Engine database table."
interface TableDefinition {
  accessAllowed: Int!
  className: String!
  columnDefinitions: [ColumnDefinitionType!]
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  indexDefinitions: [CmIndexDefinitionType]
  lastModifier: String
  lastModifierUser: User
  name: String
  nextOverflowTableDefinition: TableDefinition
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  tableName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"An interface that represents a user."
interface User {
  className: String!
  "Applicable only if the user is in a Managed type realm. Returns the CmManagedUser associated with this user."
  cmManagedUser: CmManagedUser
  displayName: String
  distinguishedName: String
  email: String
  id: String
  memberOfGroups: GroupSet
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
  shortName: String
}

"""
An interface that represents the complete set of versions for a versionable object, or document.

VersionSeries is read-only, and cannot modify any of its properties. In addition, a VersionSeries object has no security attached to it; it is secured by the current document version associated with it. You can access a specific document version by navigating through the collection returned by the Versions property.
"""
interface VersionSeries {
  accessAllowed: Int!
  className: String!
  currentVersion: Versionable
  id: ID!
  isReserved: Boolean
  isVersioningEnabled: Boolean
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  releasedVersion: Versionable
  reservation: Versionable
  updateSequenceNumber: Int!
  versions: VersionableSet
}

"Represents the base interface for objects that are versionable."
interface Versionable {
  annotations: AnnotationSet
  className: String!
  cmIsMarkedForDeletion: Boolean
  containers: ReferentialContainmentRelationshipSet
  creator: String
  creatorUser: User
  currentVersion: Document
  dateCheckedIn: DateTime
  dateCreated: DateTime
  dateLastModified: DateTime
  foldersFiledIn: FolderSet
  id: ID!
  isCurrentVersion: Boolean
  isFrozenVersion: Boolean
  isReserved: Boolean
  isVersioningEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  majorVersionNumber: Int
  minorVersionNumber: Int
  name: String
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  releasedVersion: Document
  reservation: Document
  reservationType: ReservationType
  securityFolder: Folder
  versionSeries: VersionSeries!
  versionStatus: VersionStatus
  versions: DocumentSet
}

"A type that describes an access level or right."
type AccessPermissionDescriptionType implements AccessPermissionDescription & DependentObject & GenericObject & PermissionDescription {
  accessMask: Int
  className: String!
  descriptiveText: String
  displayName: String
  permissionType: AccessPermissionTypeEnum
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents access permission through a bitmask of access rights."
type AccessPermissionType implements AccessPermission & CmAbstractPermission & DependentObject & DiscretionaryPermission & GenericObject & Permission {
  accessMask: Int
  accessType: AccessType
  className: String!
  granteeName: String
  granteeType: SecurityPrincipalType
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

type AddOnInstallationRecordType implements DependentObject & GenericObject {
  addOn: AddOn
  addOnName: String
  className: String!
  id: ID
  installationDate: DateTime
  installationReport: String
  installationStatus: InstallationStatus
  installer: String
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a collection of AddOns."
type AddOnSet {
  addOns: [AddOn!]!
  pageInfo: PageInfo!
}

"A type that represents a product extension to the core FileNet P8 Content Engine components."
type AddOnType implements AddOn & GenericObject & IndependentObject & IndependentlyPersistableObject {
  accessAllowed: Int!
  addOnType: AddOnTypeEnum
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  objectReference: ObjectReference!
  prerequisites: [ID!]
  properties(includes: [String!]): [CommonProperty!]!
  scriptType: String
  supersededAddOnIds: [ID!]
  updateSequenceNumber: Int!
}

"A type that represents an array of annotations."
type AnnotationSet {
  annotations: [Annotation!]!
  pageInfo: PageInfo!
}

"An annotation object that can be applied to a document, folder, or custom object."
type AnnotationType implements Annotation & CmHoldable & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  annotatedContentElement: Int
  annotatedObject: Containable
  className: String!
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  contentElements: [ContentElement!]
  contentElementsPresent: [String!]
  contentSize: Float
  creator: String
  creatorUser: User
  dateContentLastAccessed: DateTime
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  id: ID!
  indexationId: ID
  lastModifier: String
  lastModifierUser: User
  mimeType: String
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"A type that represents basic information about the API."
type ApiInfo {
  buildDate: String!
  buildNumber: String!
  cpeInfo: CPEInfo
  implementationTitle: String!
  implementationVersion: String!
  productVersion: String!
}

"Represents a definition that specifies audit-event parameters."
type AuditDefinitionType implements DependentObject & GenericObject {
  auditFailure: Boolean
  auditSuccess: Boolean
  className: String!
  displayName: String
  eventClass: EventClassDefinition
  filterExpression: String
  filteredPropertyId: String
  includeSubclassesRequested: Boolean
  isEnabled: Boolean
  objectStateRecordingLevel: ObjectStateRecordingLevel
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a Content Engine property that holds a BinaryList object."
type BinaryListProperty implements CommonProperty {
  alias: String!
  binaryListValue: [HexString!]
  cardinality: Cardinality!
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds a Binary value."
type BinaryProperty implements CommonProperty {
  alias: String!
  binaryValue: HexString
  cardinality: Cardinality!
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds a BooleanList object."
type BooleanListProperty implements CommonProperty {
  alias: String!
  booleanListValue: [Boolean!]
  cardinality: Cardinality!
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds a Boolean value."
type BooleanProperty implements CommonProperty {
  alias: String!
  booleanValue: Boolean
  cardinality: Cardinality!
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents basic information about the connected Content Platform Engine."
type CPEInfo {
  cpeBuildNumber: String!
  cpeDomainVersion: String!
  cpeSchemaVersion: String!
  cpeURL: String!
  cpeUser: String!
  repositoryName: String!
}

"""
A type that represents a choice list in an object store.

Each choice list contains a list collection of Choice objects that, when associated with a property, provides a discrete set of possible values that the property can hold.

By using a choice list, you can enforce restrictions on property values.
"""
type ChoiceListType implements ChoiceList & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  choiceValues: [Choice!]
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  hasHierarchy: Boolean
  id: ID!
  installedByAddOn: AddOn
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"""
A type that represents a single choice item in a choice list that can be assigned to a property, or represents a group node for a nested collection of choice items within a choice list.

A choice item is a single possible value, or choice, in a choice list.

A choice item can be of two possible types: integer or string. An integer-type choice item holds a single integer value and can be assigned only to an integer-valued property. A string-type choice item holds a single string value and can be assigned only to a string-valued property.
"""
type ChoiceType implements Choice & DependentObject & GenericObject {
  choiceIntegerValue: Int
  choiceStringValue: String
  choiceType: ChoiceTypeEnum
  choiceValues: [Choice!]
  className: String!
  displayName: String
  displayNames: [LocalizedStringType!]!
  id: ID!
  name: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a collection of class definitions"
type ClassDefinitionSet {
  classDefinitions: [ClassDefinition!]!
  pageInfo: PageInfo!
}

"A type that represents a class definition (mutable class metadata) of non-versionable, non-subscribable classes."
type ClassDefinitionType implements ClassDefinition & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"""
A type that represents the description (immutable metadata) of an object class.

A ClassDescription object maintains a snapshot, via its properties and property descriptions, of an instantiated object's property metadata throughout the object's lifetime.
"""
type ClassDescription implements Metadata {
  allowsInstances: Boolean
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissions: [CmAbstractPermission!]!
  defaultRetentionPeriod: Int
  descriptiveText: String
  displayName: String!
  hasIncludeSubclasses: Boolean
  hasProperSubclassProperties: Boolean
  id: ID!
  immediateSubclassDescriptions: [ClassDescription!]
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSecurable: Boolean
  name: String!
  namePropertyIndex: Int
  properSubclassPropertyDescriptions(filter: PropertyDescriptionFilter): [PropertyDescription!]!
  propertyDescriptions(filter: PropertyDescriptionFilter): [PropertyDescription!]!
  retentionPeriodUnits: Int
  superClassDescription: ClassDescription
  superClassPropertyCount: Int!
  symbolicName: String!
}

"A type that represents an array of classDescriptions."
type ClassDescriptionSet {
  classDescriptions: [ClassDescription!]!
  pageInfo: PageInfo!
}

"A type that represents a class subscription."
type ClassSubscriptionType implements ActionConsumer & ClassSubscription & GenericObject & IndependentObject & IndependentlyPersistableObject & ObjectSubscription & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eventAction: EventAction!
  filterExpression: String
  filteredPropertyId: String
  id: ID!
  includeSubclassesRequested: Boolean
  isEnabled: Boolean
  isSynchronous: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subscribedEvents: [SubscribedEvent!]!
  subscriptionTarget: SubscribableClassDefinition!
  updateSequenceNumber: Int!
  userString: String
}

"""
A type that represents a customizable base for classes of objects that can provide basic subscribable and replicable independently persistable behavior.

Typically the application must subclass CmAbstractPersistable to create a concrete root class with customizable properties and to create instances for that class of objects with.

For example, a customer can have LastName, FirstName, PhoneNumber, Addresses, Email.
"""
type CmAbstractPersistableType implements CmAbstractPersistable & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"A type that represents a change preprocessor definition."
type CmChangePreprocessorDefinitionType implements DependentObject & GenericObject {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type of extended permission that defines delegation of rights from a user or group to another user or group."
type CmDelegatedAccessPermissionType implements CmAbstractPermission & CmDelegatedAccessPermission & CmExtendedPermission & DependentObject & GenericObject {
  accessMask: Int
  className: String!
  delegateName: String
  delegateType: SecurityPrincipalType
  delegatingUserName: String
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that defines a database table's index."
type CmIndexDefinitionType implements DependentObject & GenericObject {
  className: String!
  databaseIndexStorageLocation: String
  forCaseInsensitiveSearch: Boolean
  id: ID!
  indexName: String
  indexedColumns: [CmIndexedColumnType!]
  isSystemOwned: Boolean
  properties(includes: [String!]): [CommonProperty!]!
  requiresUniqueElements: Boolean
}

"A type that defines a column that forms part of a database index, and the manner in which the column participates in the index."
type CmIndexedColumnType implements DependentObject & GenericObject {
  className: String!
  columnName: String
  id: ID!
  properties(includes: [String!]): [CommonProperty!]!
  sortOrder: SortOrder
}

"Represents a member of a local group."
type CmLocalGroupMemberType implements DependentObject & GenericObject {
  className: String!
  id: ID!
  memberPrincipal: SecurityPrincipal
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a Local Group."
type CmLocalGroupType implements CmLocalGroup & GenericObject & IndependentObject & IndependentlyPersistableObject {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  displayName: String
  groupMembers: [CmLocalGroupMemberType!]
  groupName: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realmGroup: Group
  updateSequenceNumber: Int!
}

"A type that represents a managed user."
type CmManagedUserType implements CmManagedUser & GenericObject & IndependentObject & IndependentlyPersistableObject {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateConfirmed: DateTime
  dateCreated: DateTime
  dateLastActive: DateTime
  dateLastModified: DateTime
  displayName: String
  email: String
  id: ID!
  lastModifier: String
  lastModifierUser: User
  managedUserStatus: ManagedUserStatus
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
  realmUser: User
  updateSequenceNumber: Int!
}

"A type that represents a Role Access Definition."
type CmRoleAccessDefinitionType implements DependentObject & GenericObject {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a class definition (mutable class metadata) of classes which are a sub-class of CmRole"
type CmRoleClassDefinitionType implements ClassDefinition & CmRoleClassDefinition & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & ReplicableClassDefinition & Subscribable & SubscribableClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  auditDefinitions: [AuditDefinitionType!]
  changePreprocessorDefinitions: [CmChangePreprocessorDefinitionType!]
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  roleAccessDefinitions: [CmRoleAccessDefinitionType!]
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"A type of extended permission that grants access through a CmRole."
type CmRolePermissionType implements CmAbstractPermission & CmExtendedPermission & CmRolePermission & DependentObject & GenericObject {
  className: String!
  inheritableDepth: InheritableDepth
  permissionSource: PermissionSource
  properties(includes: [String!]): [CommonProperty!]!
  role: CmRole
}

"A type that represents a role."
type CmRoleType implements CmRole & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  id: ID!
  isCallerInRole: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"A type that represents an array of CmThumbnails."
type CmThumbnailSet {
  cmThumbnails: [CmThumbnail!]!
  pageInfo: PageInfo!
}

"A type that represents a thumbnail image corresponding to a ContentElement of a Document."
type CmThumbnailType implements CmThumbnail & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  elementSequenceNumber: Int
  id: ID!
  image: HexString
  imageByteCount: Int
  inputDocument: Document
  isSystemGenerated: Boolean
  lastModifier: String
  lastModifierUser: User
  mimeType: String
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"A type that represents the description of a column in a Content Engine database table."
type ColumnDefinitionType implements DependentObject & GenericObject {
  allowsNull: Boolean
  className: String!
  columnId: ID
  columnName: String
  columnSize: Int
  dataType: TypeID
  id: ID
  name: String
  properties(includes: [String!]): [CommonProperty!]!
}

"""
A type that represents external content data that exists outside of an object store (and therefore outside the control of the Content Engine server), but to which an object store maintains a reference.

The URL of the resource that contains the content data is stored in the contentLocation field.
"""
type ContentReferenceType implements ContentElement & ContentReference & DependentObject & GenericObject {
  className: String!
  contentLocation: String
  contentType: String!
  elementSequenceNumber: Int!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents content data that is local to an object store and directly managed by the Content Engine server."
type ContentTransferType implements ContentElement & ContentTransfer & DependentObject & GenericObject {
  className: String!
  contentSize: Float
  contentType: String!
  downloadUrl: String
  elementSequenceNumber: Int!
  properties(includes: [String!]): [CommonProperty!]!
  retrievalName: String
}

"""
A type that represents a general type of object that can be subclassed.

A CustomObject object has no inherent semantics, but is independently securable and can be persisted to an object store.
"""
type CustomObjectType implements CmHoldable & Containable & CustomObject & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  annotations: AnnotationSet
  className: String!
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  containers: ReferentialContainmentRelationshipSet
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  indexationId: ID
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  securityFolder: Folder
  updateSequenceNumber: Int!
}

"A type that represents a Content Engine property that holds a DateTimeList object."
type DateTimeListProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  dateTimeListValue: [DateTime!]
  id: String!
  isDateOnly: Boolean
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds a Date object for specifying a date and time."
type DateTimeProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  dateTimeValue: DateTime
  id: String!
  isDateOnly: Boolean
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents objects that are dependent. A DependentObject represents an EngineObject that can only exist within the scope of another object."
type DependentObjectType implements DependentObject & GenericObject {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents an array of documents."
type DocumentSet {
  documents: [Document!]!
  pageInfo: PageInfo!
}

"""
A type that represents a single version of a document stored in a content repository.

In addition to being versionable, a Document object can be subclassed and can carry content, which is stored in one or more content elements.
"""
type DocumentType implements CmHoldable & Containable & Document & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable & Versionable {
  accessAllowed: Int!
  annotations: AnnotationSet
  childDocuments: DocumentSet
  className: String!
  classificationStatus: DocClassificationStatus
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  cmThumbnails: CmThumbnailSet
  compoundDocumentState: CompoundDocumentState
  containers: ReferentialContainmentRelationshipSet
  contentElements: [ContentElement!]
  contentElementsPresent: [String!]
  contentRetentionDate: DateTime
  contentSize: Float
  creator: String
  creatorUser: User
  currentState: String
  currentVersion: Document
  dateCheckedIn: DateTime
  dateContentLastAccessed: DateTime
  dateCreated: DateTime
  dateLastModified: DateTime
  foldersFiledIn: FolderSet
  id: ID!
  indexationId: ID
  isCurrentVersion: Boolean
  isFrozenVersion: Boolean
  isInExceptionState: Boolean
  isReserved: Boolean
  isVersioningEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  majorVersionNumber: Int
  mimeType: String
  minorVersionNumber: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  parentDocuments: DocumentSet
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  releasedVersion: Document
  reservation: Document
  reservationType: ReservationType
  securityFolder: Folder
  updateSequenceNumber: Int!
  versionSeries: VersionSeries!
  versionStatus: VersionStatus
  versions: DocumentSet
}

"A type that represents a collection of resources and services sharing the same Global Configuration Database (GCD)."
type Domain implements GenericObject & IndependentObject & IndependentlyPersistableObject {
  accessAllowed: Int!
  addOns: AddOnSet
  className: String!
  id: ID!
  name: String
  objectReference: ObjectReference!
  objectStores: ObjectStoreSet
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"""
A type that represents a dynamic relationship between two Containable subclasses: a container and the current version of a Document.

The object-valued head and tail properties express the relationship. The tail always references a Folder (the container), while the head references the current version of a Document.
"""
type DynamicReferentialContainmentRelationshipType implements ContainmentRelationship & DynamicReferentialContainmentRelationship & GenericObject & IndependentObject & IndependentlyPersistableObject & ReferentialContainmentRelationship & Relationship & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  containmentName: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  head: Containable!
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  tail: Folder!
  updateSequenceNumber: Int!
  versionSeries: VersionSeries!
}

"A type that represents external event action collection."
type EevExternalEventActionSet {
  externalEventActions: [EevExternalEventAction!]!
  pageInfo: PageInfo!
}

"A type that represents an external event action."
type EevWebhookExternalEventActionType implements Action & EevExternalEventAction & EevWebhookExternalEventAction & EventAction & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmTransactionTimeout: Int
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eevExternalEventReceiverURL: String
  eevReceiverRegistrationIdentifier: String
  id: ID!
  isEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  progId: String
  properties(includes: [String!]): [CommonProperty!]!
  scriptText: String
  subscriptions: SubscriptionSet!
  updateSequenceNumber: Int!
}

"A type that represents a Content Engine enum property that holds a IndependentObjectList object."
type EnumProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  independentObjectSetValue: IndependentObjectSet
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents an event action."
type EventActionType implements Action & EventAction & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmTransactionTimeout: Int
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  id: ID!
  isEnabled: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  progId: String
  properties(includes: [String!]): [CommonProperty!]!
  scriptText: String
  subscriptions: SubscriptionSet!
  updateSequenceNumber: Int!
}

"A type that represents a class definition (mutable class metadata) of event classes for which instances can be subscribed to or audited."
type EventClassDefinitionType implements ClassDefinition & EventClassDefinition & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"A type that represents a Content Engine property that holds a FloatList object."
type FloatListProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  floatListValue: [Float!]
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds a Double (64-bit floating point) value."
type FloatProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  floatValue: Float
  id: String!
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents an array of folders."
type FolderSet {
  folders: [Folder!]!
  pageInfo: PageInfo!
}

"""
A type that represents a container that can hold other Containable subclasses, but cannot have content data of its own.

A folder can have many child folders, but a child folder can have only one parent folder.

At the top of the container hierarchy is an automatically-created root folder.

Folders are not versionable.
"""
type FolderType implements CmHoldable & Containable & Folder & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable {
  accessAllowed: Int!
  annotations: AnnotationSet
  className: String!
  cmIndexingFailureCode: Int
  cmIsMarkedForDeletion: Boolean
  cmRetentionDate: DateTime
  containedDocuments: DocumentSet
  containees: ReferentialContainmentRelationshipSet
  containers: ReferentialContainmentRelationshipSet
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  indexationId: ID
  inheritParentPermissions: Boolean
  lastModifier: String
  lastModifierUser: User
  lockOwner: String
  lockTimeout: Int
  lockToken: ID
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  parent: Folder
  pathName: String
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subFolders: FolderSet
  updateSequenceNumber: Int!
}

"A type that represents an EngineObject along with its class name and properties."
type GenericObjectType implements GenericObject {
  className: String!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents an array of groups."
type GroupSet {
  groups: [Group!]!
  pageInfo: PageInfo!
}

"A type that represents a group of users."
type GroupType implements GenericObject & Group & IndependentObject & SecurityPrincipal {
  className: String!
  "Applicable only if the group is in a Local type realm. Returns the CmLocalGroup associated with this group."
  cmLocalGroup: CmLocalGroup
  displayName: String
  distinguishedName: String
  groups: GroupSet
  id: String
  memberOfGroups: GroupSet
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
  shortName: String
  users: UserSet
}

"A type that represents a Content Engine property that holds an IdList object."
type IdListProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  idListValue: [ID!]
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds an Id (GUID string) value."
type IdProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  idValue: ID
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a collection of IndependentObjects in an array along with paging information."
type IndependentObjectSet {
  independentObjects: [IndependentObject!]!
  pageInfo: PageInfo!
}

"A type that represents an IndependentObject represents an EngineObject that has its own independent identity, class name and properties."
type IndependentObjectType implements GenericObject & IndependentObject {
  className: String!
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a persistable IndependentObject that you can directly create, update, and delete."
type IndependentlyPersistableObjectType implements GenericObject & IndependentObject & IndependentlyPersistableObject {
  accessAllowed: Int!
  className: String!
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  updateSequenceNumber: Int!
}

"A type that represents an instance subscription."
type InstanceSubscriptionType implements ActionConsumer & GenericObject & IndependentObject & IndependentlyPersistableObject & InstanceSubscription & ObjectSubscription & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  eventAction: EventAction!
  filterExpression: String
  filteredPropertyId: String
  id: ID!
  isEnabled: Boolean
  isSynchronous: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  subscribedEvents: [SubscribedEvent!]!
  subscriptionTarget: Subscribable!
  updateSequenceNumber: Int!
  userString: String
}

"A type that represents a Content Engine property that holds an IntegerList object."
type IntegerListProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  intListValue: [Int!]
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds an Integer (32-bit signed integer) value."
type IntegerProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  intValue: Int
  label: String!
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that provides a means of support for locale-specific display names and descriptive text used by a class definition or property template."
type LocalizedStringType implements DependentObject & GenericObject {
  className: String!
  id: ID!
  localeName: String
  localizedText: String
  properties(includes: [String!]): [CommonProperty!]!
}

"""
 IBM FileNet Content Services GraphQL API

 &copy; Copyright IBM Corp. 2019 - 2023

The root Mutation type. The root fields represent the top-level mutation operations in the API.
"""
type Mutation {
  "Create a choice list."
  admCreateChoiceList(choiceListProperties: ChoiceListPropertiesInput, id: ID, repositoryIdentifier: String!): ChoiceList
  "Create a class definition."
  admCreateClassDefinition(classDefinitionProperties: ClassDefinitionPropertiesInput, id: ID, repositoryIdentifier: String!, superclassIdentifier: String!): ClassDefinition
  "Create a property template."
  admCreatePropertyTemplate(dataType: TypeID!, id: ID, propertyTemplateProperties: PropertyTemplatePropertiesInput, repositoryIdentifier: String!): PropertyTemplate
  "Delete an existing choice list."
  admDeleteChoiceList(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): ChoiceList
  "Delete an existing class definition."
  admDeleteClassDefinition(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): ClassDefinition
  "Delete an existing property template."
  admDeletePropertyTemplate(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): PropertyTemplate
  "Update an existing choice list."
  admUpdateChoiceList(choiceListProperties: ChoiceListPropertiesInput, identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): ChoiceList
  "Update an existing class definition."
  admUpdateClassDefinition(classDefinitionProperties: ClassDefinitionPropertiesInput, identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): ClassDefinition
  "Update an existing property template."
  admUpdatePropertyTemplate(identifier: String!, propertyTemplateProperties: PropertyTemplatePropertiesInput, repositoryIdentifier: String!, updateSequenceNumber: Int): PropertyTemplate
  """
  A document object cancel checkout mutation.
  
  The identifier argument can identify the document by Id or path.
  """
  cancelDocumentCheckout(identifier: String!, repositoryIdentifier: String!): Document
  """
  A generic object mutation that can create or change any independently persistable object in any way including
  chaining together pending actions.
  
  Class and object identifier are optional if this represents a create action, in which case the action itself holds at least the class information.
  
  For a domain object, pass "Domain" for classIdentifier and no identifier.
  
  The generic actions list must include an action with the type CREATE if this is a request to create an object.
  If this represents a delete action, a minimal object implementing IndependentlyPersistableObject with identifying information is returned.
  """
  changeObject(
    actions: [BaseActionInput!],
    classIdentifier: String,
    identifier: String,
    mutationCombiningOption: MutationCombiningOption,
    objectProperties: [ObjectPropertyInput!],
    properties: [PropertyIdentifierAndScalarValue!],
    repositoryIdentifier: String,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): IndependentlyPersistableObject
  """
  A document object checkin mutation.
  
  The identifier argument can identify the document by Id or path.
  """
  checkinDocument(
    checkinAction: SubCheckinActionInput!,
    documentProperties: DocumentPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object."
    updateSequenceNumber: Int
  ): Document
  """
  A document object checkout mutation.
  
  The identifier argument can identify the document by Id or path.
  
  This returns the source document being checked out.  The newly checked out Reservation object can be obtained by selecting the 'reservation' field.
  
  Note: The newly checked out reservation properties can optionally be set inside the SubCheckoutActionInput object.  The source
        document properties can optionally be set through the properties field in addition to the checkout.  Setting the source
        document properties at the time of checking it out might be rare.
  """
  checkoutDocument(
    checkoutAction: SubCheckoutActionInput,
    documentProperties: DocumentPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): Document
  """
  An Annotation object create mutation.
  
  The id is optional and can be used to predefine an object ID.
  """
  createAnnotation(annotationProperties: AnnotationPropertiesInput, classIdentifier: String, id: ID, repositoryIdentifier: String!): Annotation
  """
  A CmAbstractPersistable object creation mutation.
  
  The id is optional and can be used to predefine an object ID.
  """
  createCmAbstractPersistable(classIdentifier: String!, cmAbstractPersistableProperties: CmAbstractPersistablePropertiesInput, id: ID, repositoryIdentifier: String!): CmAbstractPersistable
  """
  A CmThumbnail object create mutation.
  
  The id is optional and can be used to predefine an object ID.
  """
  createCmThumbnail(classIdentifier: String, cmThumbnailProperties: CmThumbnailPropertiesInput, id: ID, repositoryIdentifier: String!): CmThumbnail
  """
  A custom object creation mutation.
  
  The id argument is optional and can be used to predefine the ID.
  
  The fileInFolderIdentifier argument can be specified to automatically file in a folder (RCR created) at creation time,
  specified by Id or path of the folder.
  """
  createCustomObject(classIdentifier: String, customObjectProperties: CustomObjectPropertiesInput, fileInFolderIdentifier: String, id: ID, repositoryIdentifier: String!): CustomObject
  """
  A document object creation mutation.
  
  The id and versionSeriesId arguments are optional and can be used to predefine those IDs.
  
  The checkinAction argument can be specified to automatically check in at creation time.
  
  The fileInFolderIdentifier argument can be specified to automatically file in a folder (RCR created) at creation time,
  specified by Id or path of the folder.
  """
  createDocument(checkinAction: SubCheckinActionInput, classIdentifier: String, documentProperties: DocumentPropertiesInput, fileInFolderIdentifier: String, id: ID, repositoryIdentifier: String!, versionSeriesId: ID): Document
  """
  A folder object creation mutation.
  
  The id is optional and can be used to predefine a folder ID.
  """
  createFolder(classIdentifier: String, folderProperties: FolderPropertiesInput, id: ID, repositoryIdentifier: String!): Folder
  """
  An Annotation object delete mutation.
  
  Upon successful deletion a minimal Annotation object with identifying information only is returned.
  """
  deleteAnnotation(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): Annotation
  """
  A CmAbstractPersistable object delete mutation.
  
  Upon successful deletion a minimal CmAbstractPersistable object with identifying information only is returned.
  """
  deleteCmAbstractPersistable(
    classIdentifier: String!,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): CmAbstractPersistable
  """
  A CmThumbnail object delete mutation.
  
   Upon successful deletion a minimal CmThumbnail object with identifying information only is returned.
  """
  deleteCmThumbnail(identifier: String, repositoryIdentifier: String!, updateSequenceNumber: Int): CmThumbnail
  """
  A custom object delete mutation.
  
  The identifier argument can identify the object by Id or path.
  
  Upon successful deletion a minimal CustomObject object with identifying information only is returned.
  """
  deleteCustomObject(
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): CustomObject
  """
  A document object delete mutation.
  
  The identifier argument can identify the folder by Id or path.
  
  Upon successful deletion a minimal Document object with identifying information only is returned.
  """
  deleteDocument(
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): Document
  """
  A folder object delete mutation.
  
  The identifier argument can identify the folder by Id or path.
  
  Upon successful deletion a minimal Folder object with identifying information only is returned.
  """
  deleteFolder(
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): Folder
  """
  Unfile a document or custom object from a folder mutation by deleting the corresponding referential containment relationship.
  
  The identifier argument can identify the relationship object by Id or containment path.
  
  Upon successful deletion a minimal ReferentialContainmentRelationship object with identifying information only is returned.
  """
  deleteReferentialContainmentRelationship(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): ReferentialContainmentRelationship
  """
  Delete a document version series.
  
  Upon successful deletion a minimal VersionSeries object with identifying information only is returned.
  """
  deleteVersionSeries(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): VersionSeries
  """
  A document demote version mutation.
  
  The identifier argument can identify the document by Id or path.
  """
  demoteDocumentVersion(
    documentProperties: DocumentPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): Document
  "A mutation to create an external event action."
  eevCreateExternalEventAction(externalEventActionProperties: EevBaseExternalEventActionPropertiesInput!, id: ID, repositoryIdentifier: String!, subscriptions: EevExternalEventSubscriptionSetInput): EevExternalEventAction
  "A mutation to delete a particular external event action."
  eevDeleteExternalEventAction(identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): EevExternalEventAction
  "A mutation to update a particular external event action."
  eevUpdateExternalEventAction(
    externalEventActionProperties: EevBaseExternalEventActionPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    subscriptions: EevExternalEventSubscriptionSetInput,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): EevExternalEventAction
  """
  File a custom object to a folder mutation.
  
  The identifier argument can identify the custom object by Id or path.
  
  The target folder for the custom object to file under can be identified by Id or path.
  """
  fileCustomObject(autoUniqueName: AutoUniqueName, containmentName: String, defineSecurityParentage: DefineSecurityParentage, folderIdentifier: String!, identifier: String!, repositoryIdentifier: String!): ReferentialContainmentRelationship
  """
  File a document to a folder mutation.
  
  The identifier argument can identify the document by Id or path.
  
  The target folder for the document to file under can be identified by Id or path.
  """
  fileDocument(autoUniqueName: AutoUniqueName, containmentName: String, defineSecurityParentage: DefineSecurityParentage, folderIdentifier: String!, identifier: String!, repositoryIdentifier: String!): ReferentialContainmentRelationship
  """
  A document promote version mutation.
  
  The identifier argument can identify the document by Id
  """
  promoteDocumentVersion(
    documentProperties: DocumentPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): Document
  "Create a local group."
  secCreateCmLocalGroup(cmLocalGroupProperties: CmLocalGroupPropertiesInput, id: ID): CmLocalGroup
  "Create a managed user"
  secCreateCmManagedUser(cmManagedUserProperties: CmManagedUserPropertiesInput, id: ID): CmManagedUser
  "Deletes a local group"
  secDeleteCmLocalGroup(
    "The id or symbolic name of the local group."
    identifier: String!,
    updateSequenceNumber: Int
  ): CmLocalGroup
  "Delete a managed user."
  secDeleteCmManagedUser(
    "The id or short name / email of the managed user."
    identifier: String!,
    updateSequenceNumber: Int
  ): CmManagedUser
  "Updates an existing local group."
  secUpdateCmLocalGroup(
    cmLocalGroupProperties: CmLocalGroupPropertiesInput,
    "The id or symbolic name of the local group."
    identifier: String!,
    updateSequenceNumber: Int
  ): CmLocalGroup
  "Update a managed user."
  secUpdateCmManagedUser(
    cmManagedUserProperties: CmManagedUserPropertiesInput,
    "The id or short name / email of the managed user."
    identifier: String!,
    updateSequenceNumber: Int
  ): CmManagedUser
  "An Annotation object update mutation."
  updateAnnotation(annotationProperties: AnnotationPropertiesInput, classIdentifier: String, identifier: String!, repositoryIdentifier: String!, updateSequenceNumber: Int): Annotation
  "A CmAbstractPersistable object update mutation."
  updateCmAbstractPersistable(
    "The classIdentifier argument is used for identifying the concrete sub-class of AbstractPersistable, not an argument for changing the class."
    classIdentifier: String!,
    cmAbstractPersistableProperties: CmAbstractPersistablePropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): CmAbstractPersistable
  "A CmThumbnail object update mutation."
  updateCmThumbnail(classIdentifier: String, cmThumbnailProperties: CmThumbnailPropertiesInput, identifier: String, repositoryIdentifier: String!, updateSequenceNumber: Int): CmThumbnail
  """
  A custom object update mutation.
  
  The identifier argument can identify the custom object by Id or path.
  
  Update can be combined with a Change Class by specifying a different class name for the classIdentifier argument.
  """
  updateCustomObject(
    classIdentifier: String,
    customObjectProperties: CustomObjectPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): CustomObject
  """
  A document object update mutation.
  
  The identifier argument can identify the document by Id or path.
  
  Update can be combined with a Change Class by specifying a different class name for the classIdentifier argument.
  """
  updateDocument(
    classIdentifier: String,
    documentProperties: DocumentPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object."
    updateSequenceNumber: Int
  ): Document
  """
  A folder object update mutation.
  
  The identifier argument can identify the folder by Id or path.
  
  Update can be combined with a Change Class by specifying a different class name for the classIdentifier argument.
  """
  updateFolder(
    classIdentifier: String,
    folderProperties: FolderPropertiesInput,
    identifier: String!,
    repositoryIdentifier: String!,
    "If set, the object update will only succeed if the USN matches what is on the server side object"
    updateSequenceNumber: Int
  ): Folder
}

"A type that represents a Content Engine property that holds a DependentObjectList object."
type ObjectListProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  label: String!
  objectListValue: [DependentObject!]
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds an EngineObject object."
type ObjectProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  label: String!
  objectValue: GenericObject
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents identifier information about an object. The fields primarily enable you to retrieve an object's identifier, as well as its associated class and object store identifiers."
type ObjectReference {
  classIdentifier: String!
  identifier: String!
  repositoryIdentifier: String
}

"A type that represents a location in which objects such as folders and documents are stored, accessed, and managed on the Content Engine server."
type ObjectStore implements GenericObject & IndependentObject & IndependentlyPersistableObject & Repository {
  accessAllowed: Int!
  addOnInstallationRecords: [AddOnInstallationRecordType]
  className: String!
  descriptiveText: String
  determinePrerequisiteAddOnIds(addOnId: ID!): [ID!]
  displayName: String
  id: ID!
  isAddOnInstalled(addOnId: ID!): Boolean
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  symbolicName: String
  updateSequenceNumber: Int!
}

"A type that represents a collection of ObjectStore objects."
type ObjectStoreSet {
  objectStores: [ObjectStore!]!
  pageInfo: PageInfo!
}

"A type that represents continuation token and total count information."
type PageInfo {
  token: String
  totalCount: Int
}

"A type that represents the definition of a property that holds a binary value."
type PropertyDefinitionBinary implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isReadProtected: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  maximumLengthBinary: Int
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultBinary: HexString
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"A type that represents the definition of a property that holds a boolean value."
type PropertyDefinitionBoolean implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultBoolean: Boolean
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"A type that represents the definition of a property that holds a DateTime value."
type PropertyDefinitionDateTime implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isDateOnly: Boolean
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultDateTime: DateTime
  propertyMaximumDateTime: DateTime
  propertyMinimumDateTime: DateTime
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"A type that represents the definition of a property that holds a Double (Float64) value."
type PropertyDefinitionFloat64 implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultFloat64: Float
  propertyMaximumFloat64: Float
  propertyMinimumFloat64: Float
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"A type that represents the definition of a property that holds a GUID string value."
type PropertyDefinitionId implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultId: ID
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"A type that represents the definition of a property that holds an integer value."
type PropertyDefinitionInteger32 implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultInteger32: Int
  propertyMaximumInteger32: Int
  propertyMinimumInteger32: Int
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
}

"A type that represents the definition of a property that holds a Content Engine object value."
type PropertyDefinitionObject implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  allowsForForeignObject: Boolean
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultObject: IndependentObject
  propertyTemplate: PropertyTemplate
  reflectivePropertyId: ID
  requiredClassId: ID
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
  targetAccessRequired: Int
}

"A type that represents the definition of a property that holds a string value."
type PropertyDefinitionString implements DependentObject & GenericObject & PropertyDefinition {
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  columnId: ID
  copyToReservation: Boolean
  dataType: TypeID
  descriptiveText: String
  displayName: String
  id: ID!
  isCBREnabled: Boolean
  isHidden: Boolean
  isNameProperty: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  maximumLengthString: Int
  modificationAccessRequired: Int
  name: String
  persistenceType: PropertyPersistence
  primaryId: ID
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultString: String
  propertyTemplate: PropertyTemplate
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  tableDefinition: TableDefinition
  usesLongColumn: Boolean
}

"A type that represents a Binary property description."
type PropertyDescriptionBinary implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isReadProtected: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  maximumLengthBinary: Int
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultBinary: HexString
  propertySelectionBinary: [HexString!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"A type that represents a Boolean property description."
type PropertyDescriptionBoolean implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultBoolean: Boolean
  propertySelectionsBoolean: [Boolean!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"A type that represents a DateTime property description."
type PropertyDescriptionDateTime implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isDateOnly: Boolean
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultDateTime: DateTime
  propertyMaximumDateTime: DateTime
  propertyMinimumDateTime: DateTime
  propertySelectionsDateTime: [DateTime!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"A type that represents a Float property description."
type PropertyDescriptionFloat64 implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultFloat64: Float
  propertyMaximumFloat64: Float
  propertyMinimumFloat64: Float
  propertySelectionsFloat64: [Float!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"A that type represents an Id property description."
type PropertyDescriptionId implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultId: ID
  propertySelectionsId: [String!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"A type that represents an Integer property description."
type PropertyDescriptionInteger32 implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultInteger32: Int
  propertyMaximumInteger32: Int
  propertyMinimumInteger32: Int
  propertySelectionsInteger32: [Int!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"A type that represents an Object property description."
type PropertyDescriptionObject implements Metadata & PropertyDescription {
  allowsForeignObject: Boolean
  cBRPropagationType: Int
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultObject: IndependentObject
  propertySelectionsObject: [DependentObject!]
  reflectivePropertyId: ID
  requiredClass: ClassDescription
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
  targetAccessRequired: Int
}

"A type that represents a String property description."
type PropertyDescriptionString implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isCBREnabled: Boolean
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  maximumLengthString: Int
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  propertyDefaultString: String
  propertySelectionsString: [String!]
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
  usesLongColumn: Boolean
}

"""
A type that represents a property description.

A property description holds immutable metadata that describes a specific object class property.
Each property description further corresponds to a specific property data type.
"""
type PropertyDescriptionType implements Metadata & PropertyDescription {
  cardinality: Cardinality!
  choiceList: ChoiceList
  copyToReservation: Boolean
  dataType: TypeID!
  descriptiveText: String
  displayName: String!
  id: ID!
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemGenerated: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  name: String!
  persistenceType: PropertyPersistence
  privilegedSettability: PropertySettability
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String!
}

"Represents a property template for creating PropertyDefinitionBinary objects, which you can add to class definitions to create user-defined properties for holding binary values."
type PropertyTemplateBinary implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isReadProtected: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  maximumLengthBinary: Int
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultBinary: HexString
  propertyDisplayCategory: String
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionBoolean objects, which you can add to class definitions to create user-defined properties for holding Boolean values."
type PropertyTemplateBoolean implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultBoolean: Boolean
  propertyDisplayCategory: String
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionDateTime objects, which you can add to class definitions to create user-defined properties for holding DateTime values."
type PropertyTemplateDateTime implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isDateOnly: Boolean
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultDateTime: DateTime
  propertyDisplayCategory: String
  propertyMaximumDateTime: DateTime
  propertyMinimumDateTime: DateTime
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionFloat64 objects, which you can add to class definitions to create user-defined properties for holding Double (Float64) values."
type PropertyTemplateFloat64 implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultFloat64: Float
  propertyDisplayCategory: String
  propertyMaximumFloat64: Float
  propertyMinimumFloat64: Float
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionId objects, which you can add to class definitions to create user-defined properties for holding GUID string values."
type PropertyTemplateId implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultId: ID
  propertyDisplayCategory: String
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionInteger32 objects, which you can add to class definitions to create user-defined properties for holding integer values."
type PropertyTemplateInteger32 implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultInteger32: Int
  propertyDisplayCategory: String
  propertyMaximumInteger32: Int
  propertyMinimumInteger32: Int
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionObject objects, which you can add to class definitions to create user-defined properties for holding Content Engine object values."
type PropertyTemplateObject implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  allowsForeignObject: Boolean
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDisplayCategory: String
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"Represents a property template for creating PropertyDefinitionString objects, which you can add to class definitions to create user-defined properties for holding string values."
type PropertyTemplateString implements GenericObject & IndependentObject & IndependentlyPersistableObject & PropertyTemplate & Replicable & Subscribable {
  accessAllowed: Int!
  aliasIds: [ID!]
  auditAs: PropertyTemplate
  cardinality: Cardinality
  choiceList: ChoiceList
  className: String!
  creator: String
  creatorUser: User
  dataType: TypeID
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  installedByAddOn: AddOn
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  lastModifier: String
  lastModifierUser: User
  maximumLengthString: Int
  modificationAccessRequired: Int
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  persistenceType: PropertyPersistence
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefaultString: String
  propertyDisplayCategory: String
  requiresUniqueElements: Boolean
  settability: PropertySettability
  symbolicName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
  usesLongColumn: Boolean
}

"""
 IBM FileNet Content Services GraphQL API

 &copy; Copyright IBM Corp. 2019 - 2023

The root Query type. The root fields represent the top-level query operations in the API.
"""
type Query {
  """
  A generic Ping query.
  The query returns the Version information of the Content Service GraphQL server.
  """
  _apiInfo(repositoryIdentifier: String): ApiInfo
  "A class definition retrieval query."
  admClassDefinition(identifier: String!, repositoryIdentifier: String!): ClassDefinition
  "A property template retrieval query."
  admPropertyTemplate(
    "The identifier of the property template. This can be the Id or the symbolic name of template."
    identifier: String!,
    repositoryIdentifier: String!
  ): PropertyTemplate
  """
  An annotation object retrieval query.
  
   Annotation object can be identified by Id
  """
  annotation(identifier: String!, repositoryIdentifier: String!): Annotation
  "A choice list retrieval query."
  choiceList(identifier: String!, repositoryIdentifier: String!): ChoiceList
  """
  A query to return the description (immutable metadata) of an object class.
  
  A ClassDescription object maintains a snapshot, via its properties and property descriptions, of an instantiated object's property metadata throughout the object's lifetime.
  """
  classDescription(identifier: String!, repositoryIdentifier: String!): ClassDescription
  "An abstract persistable retrieval query."
  cmAbstractPersistable(classIdentifier: String!, identifier: String!, repositoryIdentifier: String!): CmAbstractPersistable
  """
  A CmThubmnail object retrieval query.
  
   CmThumbnail object can be identified by Id
  """
  cmThumbnail(identifier: String!, repositoryIdentifier: String!): CmThumbnail
  """
  A custom object retrieval query.
  
  Custom object can be identified by Id or path.
  """
  customObject(identifier: String!, repositoryIdentifier: String!): CustomObject
  """
  A document object retrieval query.
  
  Document can be identified with Id or path.
  """
  document(identifier: String!, repositoryIdentifier: String!): Document
  "A query to search for documents."
  documents(from: String, options: String, orderBy: String, pageSize: Int, repositoryIdentifier: String!, where: String): DocumentSet
  "A domain object retrieval query."
  domain: Domain
  "A query to return a particular external event action."
  eevExternalEventAction(identifier: String!, repositoryIdentifier: String!): EevExternalEventAction
  "A query to return a collection of external event actions by filter."
  eevExternalEventActions(filter: EevExternalEventActionsFilterInput, pageSize: Int, repositoryIdentifier: String!): EevExternalEventActionSet
  "A query that passes in a previous continuation token to return more external event actions."
  eevMoreExternalEventActions(token: String!): EevExternalEventActionSet
  """
  A folder object retrieval query.
  
  Folder can be identified with Id or path.
  """
  folder(identifier: String!, repositoryIdentifier: String!): Folder
  "A query to search for folders."
  folders(from: String, options: String, orderBy: String, pageSize: Int, repositoryIdentifier: String!, where: String): FolderSet
  "A query that passes in a previous search continuation token to return more documents ."
  moreDocuments(token: String!): DocumentSet
  "A query that passes in a previous search continuation token to return more folders."
  moreFolders(token: String!): FolderSet
  "A query that passes in a previous search continuation token to return more repository objects."
  moreIndependentObjects(token: String!): IndependentObjectSet
  "A query that passes in a previous search continuation token to return more repository objects as rows."
  moreRepositoryRows(token: String!): RepositoryRowSet
  "A query by passing in previous search continuation token to return more subclass descriptions."
  moreSubClassDescriptions(token: String!): ClassDescriptionSet
  """
  A generic object retrieval query.
  
  The repositoryIdentifier argument is optional and indicates whether the object is a repository object (object store level) or non-repository object (domain level).
  For the domain object itself, pass "Domain" for classIdentifier and no identifier.
  """
  object(classIdentifier: String!, identifier: String, repositoryIdentifier: String): IndependentObject
  """
  An object store object retrieval query.
  
  Object store can be identified with Id or symbolic name.
  """
  objectStore(identifier: String!): ObjectStore
  "A referential containment relationship retrieval query."
  referentialContainmentRelationship(identifier: String!, repositoryIdentifier: String!): ReferentialContainmentRelationship
  "A query that can take multiple searches for repository objects of different types and returns the paging capable result set."
  repositoryObjectSearches(pageSize: Int, repositoryIdentifier: String!, searches: [RepositoryObjectSearchInput!]!): IndependentObjectSet
  "A query to search for repository objects -- independent objects stored in a repository."
  repositoryObjects(from: String!, options: String, orderBy: String, pageSize: Int, repositoryIdentifier: String!, where: String): IndependentObjectSet
  "A more generic query to search for repository objects represented as rows."
  repositoryRows(pageSize: Int, repositoryIdentifier: String!, sql: String!): RepositoryRowSet
  "Retrieves a local group."
  secCmLocalGroup(
    """
    The identifier by which to obtain the local group. This can be the id or symbolic name of the
    local group object itself or an identifier for the corresponding Group in the security realm.
    Use identifierType to indicate which type of identifier is used.
    """
    identifier: String!,
    "The type of identifier specified by the identifier argument. If not specified or null, defaults to CM_LOCAL_GROUP."
    identifierType: CmLocalGroupIdentifierTypeEnum
  ): CmLocalGroup
  "Retrieves a managed user."
  secCmManagedUser(
    """
    The identifier by which to obtain the managed user. This can be the id or short name / email of the
    managed user object itself or an identifier for the corresponding User in the security realm.
    Use identifierType to indicate which type of identifier is used.
    """
    identifier: String!,
    "The type of identifier specified by the identifier argument. If not specified or null, defaults to CM_MANAGED_USER."
    identifierType: CmManagedUserIdentifierTypeEnum
  ): CmManagedUser
  "Retrieves the current user."
  secCurrentUser: User
  "Retrieves a group."
  secGroup(
    "An identifier of the group -- typically the id, short name or distinguished name."
    identifier: String!
  ): Group
  "A query to find groups in a realm."
  secGroups(
    pageSize: Int,
    "The id or symbolic name of a realm to search. If null the realm of the current user is used."
    realmIdentifier: String,
    searchAttribute: PrincipalSearchAttribute,
    searchPattern: String,
    searchType: PrincipalSearchTypeEnum,
    sortType: PrincipalSearchSortTypeEnum
  ): GroupSet
  "A query to find a list of realms."
  secRealms(filter: RealmFilterInput, limit: Int): [Realm!]
  "Retrieves a user."
  secUser(
    "An identifier of the user -- typically the id, short name or distinguished name."
    identifier: String!
  ): User
  "A query to find users in a realm."
  secUsers(
    pageSize: Int,
    "The id or symbolic name of a realm to search. If null the realm of the current user is used."
    realmIdentifier: String,
    searchAttribute: PrincipalSearchAttribute,
    searchPattern: String,
    searchType: PrincipalSearchTypeEnum,
    sortType: PrincipalSearchSortTypeEnum
  ): UserSet
  "A query to return subclasses of a particular class as ClassDescriptions."
  subClassDescriptions(identifier: String!, pageSize: Int, repositoryIdentifier: String!): ClassDescriptionSet
  "A document version series retrieval query."
  versionSeries(identifier: String!, repositoryIdentifier: String!): VersionSeries
}

"A type that represents a realm."
type RealmType implements GenericObject & IndependentObject & Realm {
  className: String!
  id: ID!
  name: String
  objectReference: ObjectReference!
  principalCategory: String
  properties(includes: [String!]): [CommonProperty!]!
  realmDirectoryType: RealmDirectoryTypeEnum
  symbolicName: String
}

"A type that represents an array of ReferentialContainmentRelationship objects."
type ReferentialContainmentRelationshipSet {
  pageInfo: PageInfo!
  referentialContainmentRelationships: [ReferentialContainmentRelationship!]!
}

"""
A type that represents a static relationship between two Containable subclasses: a container and a containee.

The object-valued head and tail express the relationship. The tail always references a Folder (the container), while the head references the containee: another Containable subclass (such as another Folder, a Document, or a CustomObject).

When the head is a Document object, it represents a specific document version.
"""
type ReferentialContainmentRelationshipType implements ContainmentRelationship & GenericObject & IndependentObject & IndependentlyPersistableObject & ReferentialContainmentRelationship & Relationship & Replicable & Subscribable {
  accessAllowed: Int!
  className: String!
  cmIsMarkedForDeletion: Boolean
  containmentName: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  head: Containable!
  id: ID!
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  tail: Folder!
  updateSequenceNumber: Int!
}

"A type that represents a class definition (mutable class metadata) of classes of which an object instance can be replicated"
type ReplicableClassDefinitionType implements ClassDefinition & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & ReplicableClassDefinition & Subscribable & SubscribableClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  auditDefinitions: [AuditDefinitionType!]
  changePreprocessorDefinitions: [CmChangePreprocessorDefinitionType!]
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"A type that represents a repository row."
type RepositoryRow {
  properties: [CommonProperty!]!
}

"A type that represents an array of repository rows."
type RepositoryRowSet {
  pageInfo: PageInfo!
  repositoryRows: [RepositoryRow!]!
}

"A type that represents a Content Engine property that holds a StringList object."
type StringListProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  label: String!
  stringListValue: [String!]
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a Content Engine property that holds a String value."
type StringProperty implements CommonProperty {
  alias: String!
  cardinality: Cardinality!
  id: String!
  label: String!
  stringValue: String
  type: TypeID!
  value: ScalarPropertyValue
}

"A type that represents a class definition (mutable class metadata) of classes whose instances can be the target of a subscription and can be audited."
type SubscribableClassDefinitionType implements ClassDefinition & GenericObject & IndependentObject & IndependentlyPersistableObject & Replicable & Subscribable & SubscribableClassDefinition {
  accessAllowed: Int!
  aliasIds: [ID!]!
  allowsInstances: Boolean
  allowsPropertyAdditions: Boolean
  allowsSubclasses: Boolean
  auditDefinitions: [AuditDefinitionType!]
  changePreprocessorDefinitions: [CmChangePreprocessorDefinitionType!]
  className: String!
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOwner: String
  defaultInstanceOwnerPrincipal: SecurityPrincipal
  defaultInstancePermissionDescriptions: [AccessPermissionDescription!]
  defaultInstancePermissions: [CmAbstractPermission!]
  defaultRetentionPeriod: Int
  descriptiveText: String
  descriptiveTexts: [LocalizedStringType!]
  displayName: String
  displayNames: [LocalizedStringType!]
  id: ID!
  immediateSubclassDefinitions: ClassDefinitionSet
  installedByAddOn: AddOn
  isCBREnabled: Boolean
  isHidden: Boolean
  isPersistent: Boolean
  isSystemOwned: Boolean
  lastModifier: String
  lastModifierUser: User
  name: String
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  propertyDefinitions: [PropertyDefinition!]
  protectedPropertyCount: Int
  retentionPeriodUnits: DurationUnits
  superClassDefinition: ClassDefinition
  symbolicName: String!
  tableDefinition: TableDefinition
  updateSequenceNumber: Int!
}

"A type that represents a subscribed event."
type SubscribedEvent implements DependentObject & GenericObject {
  className: String!
  eventClass: EventClassDefinition!
  id: ID!
  properties(includes: [String!]): [CommonProperty!]!
}

"A type that represents a collection of subscriptions."
type SubscriptionSet {
  pageInfo: PageInfo!
  subscriptions: [ObjectSubscription!]!
}

"A type that represents the description of a Content Engine database table."
type TableDefinitionType implements GenericObject & IndependentObject & IndependentlyPersistableObject & TableDefinition {
  accessAllowed: Int!
  className: String!
  columnDefinitions: [ColumnDefinitionType!]
  creator: String
  creatorUser: User
  dateCreated: DateTime
  dateLastModified: DateTime
  id: ID!
  indexDefinitions: [CmIndexDefinitionType]
  lastModifier: String
  lastModifierUser: User
  name: String
  nextOverflowTableDefinition: TableDefinition
  objectReference: ObjectReference!
  owner: String
  ownerPrincipal: SecurityPrincipal
  permissions: [CmAbstractPermission!]
  properties(includes: [String!]): [CommonProperty!]!
  tableName: String
  updateSequenceNumber: Int!
  usedInClasses: ClassDefinitionSet
}

"A type that represents an array of users."
type UserSet {
  pageInfo: PageInfo!
  users: [User!]!
}

"A type represents a user."
type UserType implements GenericObject & IndependentObject & SecurityPrincipal & User {
  className: String!
  "Applicable only if the user is in a Managed type realm. Returns the CmManagedUser associated with this user."
  cmManagedUser: CmManagedUser
  displayName: String
  distinguishedName: String
  email: String
  id: String
  memberOfGroups: GroupSet
  name: String
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  realm: Realm
  shortName: String
}

"""
A type that represents the complete set of versions for a versionable object, or document.

VersionSeries is read-only, and cannot modify any of its properties. In addition, a VersionSeries object has no security attached to it; it is secured by the current document version associated with it. You can access a specific document version by navigating through the collection returned by the Versions property.
"""
type VersionSeriesType implements GenericObject & IndependentObject & IndependentlyPersistableObject & Subscribable & VersionSeries {
  accessAllowed: Int!
  className: String!
  currentVersion: Versionable
  id: ID!
  isReserved: Boolean
  isVersioningEnabled: Boolean
  objectReference: ObjectReference!
  properties(includes: [String!]): [CommonProperty!]!
  releasedVersion: Versionable
  reservation: Versionable
  updateSequenceNumber: Int!
  versions: VersionableSet
}

"A type that represents an array of Versionable objects, typically documents."
type VersionableSet {
  pageInfo: PageInfo!
  versionables: [Versionable!]!
}

"The type of an access permission."
enum AccessPermissionTypeEnum {
  LEVEL
  LEVEL_DEFAULT
  RIGHT
  RIGHT_INHERIT_ONLY
}

"Specifies the security access (allow or deny) that a user has for a given AccessPermission object."
enum AccessType {
  ALLOW
  DENY
}

"Identifies a type of Action to apply onto an object being modified."
enum ActionType {
  APPLY_SECURITY_TEMPLATE
  CHANGE_CLASS
  CHANGE_STATE
  CHECKIN
  CHECKOUT
  CREATE
  DELETE
  DEMOTE_VERSION
  FREEZE
  INSTALL_ADD_ON
  LOCK
  MOVE_CONTENT
  PROMOTE_VERSION
  RAISE_EVENT
  RECOVER
  TAKE_FEDERATED_OWNERSHIP
  UNLOCK
  UPDATE
}

"Identifies whether the installation of an add-on is optional or recommended."
enum AddOnTypeEnum {
  OPTIONAL
  RECOMMENDED
}

"Specifies whether naming collisions are to be detected and automatically resolved for containment names."
enum AutoUniqueName {
  AUTO_UNIQUE
  NOT_AUTO_UNIQUE
}

"Specifies whether a property can hold a single value (single cardinality) or a collection of multiple values (list or enumeration cardinality)."
enum Cardinality {
  ENUM
  LIST
  SINGLE
}

"For certain input types, specifies whether a new object is being added or an existing object is being updated."
enum ChangeMode {
  ADD
  UPDATE
}

"Specifies the type of data that a Choice object represents."
enum ChoiceTypeEnum {
  INTEGER
  MIDNODE_INTEGER
  MIDNODE_STRING
  STRING
}

"The type of identifier used to reference a CmLocalGroup."
enum CmLocalGroupIdentifierTypeEnum {
  "This type identifies the CmLocalGroup object directly -- id or symbolic name."
  CM_LOCAL_GROUP
  "This type identifies the Group in the Local realm -- security id, short name or distinguished name"
  REALM_GROUP
}

"The type of identifier used to reference a CmManagedUser."
enum CmManagedUserIdentifierTypeEnum {
  "This type identifies the CmManagedUser object directly -- id or short name / email."
  CM_MANAGED_USER
  "This type identifies the User in the Managed realm -- security id, short name or distinguished name"
  REALM_USER
}

"Defines settings that identify whether a document is a standard document or a parent component in a compound document."
enum CompoundDocumentState {
  COMPOUND_DOCUMENT
  STANDARD_DOCUMENT
}

"Identifies type type of content element being added."
enum ContentElementType {
  CONTENT_REFERENCE
  CONTENT_TRANSFER
}

"Indicates whether the SecurityFolder property of the object referenced by the ReferentialContainmentRelationship object's Head property is set to the Folder object referenced by the ReferentialContainmentRelationship object's Tail property."
enum DefineSecurityParentage {
  DEFINE_SECURITY_PARENTAGE
  DO_NOT_DEFINE_SECURITY_PARENTAGE
}

"Specifies the auto-classification status of a document."
enum DocClassificationStatus {
  CLASSIFICATION_COMPLETE
  CLASSIFICATION_FAILED
  CLASSIFICATION_PENDING
  NOT_CLASSIFIED
}

"specifies the time unit in which the retention duration period is expressed."
enum DurationUnits {
  DAYS
  HOURS
  MINUTES
  MONTHS
  SECONDS
  WEEKS
  YEARS
}

"Identifies a specific type of credential. Only HMAC is supported."
enum EevCredentialType {
  HMAC
}

"Identifies a specific type of external event action. Only WEBHOOK is supported."
enum EevExternalEventActionSubType {
  WEBHOOK
}

"Specifies the depth to which a permission should be inherited."
enum InheritableDepth {
  "All children, but not this object"
  ALL_CHILDREN_NOT_OBJECT
  "Immediate children, but not this object"
  IMMEDIATE_CHILDREN_NOT_OBJECT
  "This object and all children"
  OBJECT_ALL_CHILDREN
  "This object and immediate children"
  OBJECT_IMMEDIATE_CHILDREN
  "This object only"
  OBJECT_ONLY
}

enum InstallationStatus {
  INSTALLATION_FAILURE
  INSTALLED
}

"Specifies how to change a document's current lifecycle state or exception-state status, or a task's current state or exception-state status."
enum LifecycleChangeFlags {
  CLEAR_EXCEPTION
  DEMOTE
  PROMOTE
  RESET
  SET_EXCEPTION
}

"The status of a managed user"
enum ManagedUserStatus {
  CONFIRMED
  DISABLED
  PROVISIONAL
}

"""
For mutations that support this option, specifies whether the mutation will combine onto the instance
operated by the previous mutation when both mutations refer to the same object.
"""
enum MutationCombiningOption {
  COMBINE_PREVIOUS_ALLOWED
  COMBINE_PREVIOUS_NOT_ALLOWED
}

"Specifies the audit recording level of the source object for an event of type ObjectChangeEvent"
enum ObjectStateRecordingLevel {
  MODIFIED_OBJECT
  NONE
  ORIGINAL_AND_MODIFIED_OBJECTS
}

"Specifies the source of a given access permission."
enum PermissionSource {
  MARKING
  PROXY
  SOURCE_DEFAULT
  SOURCE_DIRECT
  SOURCE_PARENT
  SOURCE_TEMPLATE
}

"Specifies the type of permission."
enum PermissionType {
  ACCESS_PERMISSION
  DELEGATED_ACCESS_PERMISSION
  ROLE_PERMISSION
}

"Determines which (if any) identifying attribute is used for a specified search pattern."
enum PrincipalSearchAttribute {
  DISPLAY_NAME
  NONE
  SHORT_NAME
}

"Determines which (if any) sorting is applied to the results of a specified search pattern."
enum PrincipalSearchSortTypeEnum {
  ASCENDING
  DESCENDING
  NONE
}

"Determines which (if any) pattern-matching is used for a specified search pattern."
enum PrincipalSearchTypeEnum {
  CONTAINS
  CUSTOM
  EXACT
  NONE
  PREFIX_MATCH
  SUFFIX_MATCH
}

"Specifies whether a property can be made persistent (that is, have its state stored in a database)."
enum PropertyPersistence {
  NOT_PERSISTENT
  OWN_COLUMN
  OWN_TABLE
}

"Specifies when the value of a property can be set."
enum PropertySettability {
  READ_ONLY
  READ_WRITE
  SETTABLE_ONLY_BEFORE_CHECKIN
  SETTABLE_ONLY_ON_CREATE
}

"Indicates the directory type of a realm"
enum RealmDirectoryTypeEnum {
  ACTIVE_DIRECTORY
  ADAM
  CA
  DOMINO
  IBM
  LOCAL
  MANAGED
  NOVELL
  ORACLE
  RADIANT_ONE
  SCIM
  SUN_ONE
  VMM
}

"Specifies the type of reservation created for a checked-out document."
enum ReservationType {
  COLLABORATIVE
  EXCLUSIVE
  OBJECT_STORE_DEFAULT
}

"Identifies the type of the security principal."
enum SecurityPrincipalType {
  GROUP
  UNKNOWN
  USER
}

"Specifies the sort order."
enum SortOrder {
  ASCENDING
  DESCENDING
  NONE
}

"Identifies the subscription as applying at the class or instance level."
enum SubscriptionType {
  CLASS
  INSTANCE
}

"Specifies the data type of the values that a property, choice list, or column definition can hold."
enum TypeID {
  BINARY
  BOOLEAN
  DATE
  DOUBLE
  GUID
  LONG
  OBJECT
  STRING
}

"Specifies the current version state of a document version."
enum VersionStatus {
  IN_PROCESS
  RELEASED
  RESERVATION
  SUPERSEDED
}

"A scalar that holds a date or a date and time."
scalar DateTime

"A scalar that holds a binary value formatted as a hexidecimal string."
scalar HexString

"A pair of a property identifier and a property value that can have a variety of formats."
scalar PropertyIdentifierAndScalarValue

"A value of a property that can have a variety of formats depending on the type of the property and also its cardinality."
scalar ScalarPropertyValue

"An input type when creating or updating an Annotation object."
input AnnotationPropertiesInput {
  annotatedContentElement: Int
  "The Containable object this annotation is annotating."
  annotatedObject: ObjectReferenceInput
  cmRetentionDate: DateTime
  "A single content element can be specified for annotation creation or update."
  content: String
  "Content can also be multiple content elements. Elements can be ContentReference or ContentTransfer."
  contentElements: ContentElementListInput
  descriptiveText: String
  mimeType: String
  "Name sets whatever property is configured as the Name property on the Annotation class"
  name: String
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
  storageArea: ObjectReferenceInput
  storagePolicy: ObjectReferenceInput
}

"""
Used to add or modify an Audition Definition object in a list of definitions.

Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
set and indicates the action that this input object represents. If none
of the fields are set the action defaults to insert.

When the action is taken on an existing object, for example by specifying the updateAction field, the
itemReference sub-field must be specified. Audition Definition objects can be referenced by the originalIndex sub-field
of that itemReference object or by the id sub-field.
"""
input AuditDefinitionInput {
  auditFailure: Boolean
  auditSuccess: Boolean
  "Indicates this input object represents a deletion of an existing audit definition."
  deleteAction: DeleteDependentActionInput
  displayName: String
  eventClass: ObjectReferenceInput
  filterExpression: String
  filteredPropertyId: String
  includeSubclassesRequested: Boolean
  """
  Indicates this input object represents an insertion of a new audit definition.
  It is not necessary to set the classIdentifier sub-field as there is only one AuditDefinition class.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  isEnabled: Boolean
  "Indicates this input object represents a move of an existing audit definition."
  moveAction: MoveDependentActionInput
  objectStateRecordingLevel: ObjectStateRecordingLevel
  "Indicates this input object represents an update of an existing audit definition."
  updateAction: UpdateDependentActionInput
}

"""
Represents a list of audit definitions.
Either the replace field or modify field must be specified. The replace field is equivalent to deleting
all existing audit definitions and inserting some number of new ones.
Only the insertAction field of each AuditDefinitionInput object can be specified if the list
of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
as it is the default action. Passing a list of objects to the modify field allows a finer grain
manipulation of the list of objects.
"""
input AuditDefinitionListInput {
  modify: [AuditDefinitionInput!]
  replace: [AuditDefinitionInput!]
}

"An input type to represent generically any action that can be performed when persisting an object."
input BaseActionInput {
  subApplySecurityTemplateAction: SubApplySecurityTemplateActionInput
  subChangeClassAction: SubChangeClassActionInput
  subChangeStateAction: SubChangeStateActionInput
  subCheckinAction: SubCheckinActionInput
  subCheckoutAction: SubCheckoutActionInput
  subCreateAction: SubCreateActionInput
  subInstallAddonAction: SubInstallAddOnActionInput
  subLockAction: SubLockActionInput
  subMoveContentAction: SubMoveContentActionInput
  subRaiseEventAction: SubRaiseEventActionInput
  subRecoverAction: SubRecoverActionInput
  type: ActionType
}

"""
An input type that represents any type of Content Element (ContentReference or ContentTransfer).

 Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
 set and indicates the action that this input object represents. If none
 of the fields are set the action defaults to insert.

 When the action is taken on an existing object, for example by specifying the updateAction field, the
 itemReference sub-field must be specified. Content elements can be referenced by the originalIndex sub-field
 of that itemReference object. The sequenceNumber sub-field can also be specified as the ElementSequenceNumber
 property value of the content element.
"""
input BaseContentElementInput {
  contentType: String
  "Indicates this content element input object represents a deletion of an existing content element."
  deleteAction: DeleteDependentActionInput
  """
  Indicates this content element input object represents an insertion of a new content element.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  "Indicates this content element input object represents a move of an existing content element."
  moveAction: MoveDependentActionInput
  "A sub-field to specify fields specific to a ContentReference content element."
  subContentReference: SubContentReferenceInput
  "A sub-field to specify fields specific to a ContentTransfer content element."
  subContentTransfer: SubContentTransferInput
  """
  A strongly defined type can be used to specify the type of content element. This field only
  applies when inserting a new content element and can be used as an alternative
  to setting the classIdentifier sub-field of the insertAction field as the actual class name
  of the content element.
  
  For an existing element, the type of content element is already known. If this field is specified
  and it does not match the type of the existing element, or if classIdentifier is also specified when
  inserting a new element and it does not match this type, an error will be raised.
  """
  type: ContentElementType
  "Indicates this content element input object represents an update of an existing content element."
  updateAction: UpdateDependentActionInput
}

"""
An input type that represents a permission for an object.

 Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
 set and indicates the action that this input object represents. If none
 of the fields are set the action defaults to insert.

 When the action is taken on an existing object, for example by specifying the updateAction field, the
 itemReference sub-field must be specified. Permissions can be referenced by the originalIndex sub-field
 only of that itemReference object.

Only AccessPermission, DelegatedAccessPermission and RolePermission are supported.
"""
input BasePermissionInput {
  accessMask: Int
  "Indicates this permission input object represents a deletion of an existing permission."
  deleteAction: DeleteDependentActionInput
  inheritableDepth: InheritableDepth
  """
  Indicates this permission input object represents an insertion of a new permission.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  "Indicates this permission input object represents a move of an existing permission."
  moveAction: MoveDependentActionInput
  "AccessPermission specific fields can be specified through this sub-field."
  subAccessPermission: SubAccessPermissionInput
  "DelegatedAccessPermission specific fields can be specified through this sub-field."
  subDelegatedAccessPermission: SubDelegatedAccessPermissionInput
  "RolePermission specific fields can be specified through this sub-field."
  subRolePermission: SubRolePermissionInput
  """
  A strongly defined type can be used to specify the type of permission. This field only
  applies when inserting a new permission and can be used as an alternative
  to setting the classIdentifier sub-field of the insertAction field as the actual class name
  of the permission object.
  
  For an existing item, the type of permission is already known. If this field is specified
  and it does not match the type of the existing item, or if classIdentifier is also specified when
  inserting a new item and it does not match this type, an error will be raised.
  """
  type: PermissionType
  "Indicates this permission input object represents an update of an existing permission."
  updateAction: UpdateDependentActionInput
}

"""
Used to add or modify a Choice object in a list of choices.

Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
set and indicates the action that this input object represents. If none
of the fields are set the action defaults to insert.

When the action is taken on an existing object, for example by specifying the updateAction field, the
itemReference sub-field must be specified. Choice objects can be referenced by the originalIndex sub-field
of that itemReference object or by the id sub-field.
"""
input ChoiceInput {
  choiceIntegerValue: Int
  choiceStringValue: String
  choiceType: ChoiceTypeEnum
  choiceValues: ChoiceListInput
  "Indicates this input object represents a deletion of an existing choice."
  deleteAction: DeleteDependentActionInput
  displayName: String
  displayNames: LocalizedStringListInput
  """
  Indicates this input object represents an insertion of a new choice.
  It is not necessary to set the classIdentifier sub-field as there is only one Choice class.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  "Indicates this input object represents a move of an existing choice."
  moveAction: MoveDependentActionInput
  "Indicates this input object represents an update of an existing choice."
  updateAction: UpdateDependentActionInput
}

"""
Represents a list of choices in a choice list.
Either the replace field or modify field must be specified. The replace field is equivalent to deleting
all existing choices and inserting some number of new choices.
Only the insertAction field of each ChoiceInput object can be specified if the list
of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
as it is the default action. Passing a list of objects to the modify field allows a finer grain
manipulation of the list of objects.
"""
input ChoiceListInput {
  modify: [ChoiceInput!]
  replace: [ChoiceInput!]
}

"Specifies properties when creating or updating a choice list."
input ChoiceListPropertiesInput {
  choiceValues: ChoiceListInput
  dataType: TypeID
  "dateCreated and dateLastModified can only be set by users who have been granted privileged write access (AccessRight.PRIVILEGED_WRITE)"
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveText: String
  displayName: String
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
}

"Specifies properties when creating or updating a Class Definition."
input ClassDefinitionPropertiesInput {
  aliasIds: [ID!]
  allowsInstances: Boolean
  "dateCreated and dateLastModified can only be set by users who have been granted privileged write access (AccessRight.PRIVILEGED_WRITE)"
  dateCreated: DateTime
  dateLastModified: DateTime
  defaultInstanceOnwer: String
  defaultInstancePermissions: PermissionListInput
  defaultRetentionPeriod: Int
  descriptiveTexts: LocalizedStringListInput
  displayNames: LocalizedStringListInput
  isCBREnabled: Boolean
  isHidden: Boolean
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  properties: [PropertyIdentifierAndScalarValue!]
  propertyDefinitions: PropertyDefinitionListInput
  replicationGroup: ObjectReferenceInput
  retentionPeriodUnits: DurationUnits
  subSubscribableClassDefinitionProperties: SubSubscribableClassDefinitionPropertiesInput
  symbolicName: String
}

"An input type when creating or updating a CmAbstractPersistable object."
input CmAbstractPersistablePropertiesInput {
  "Name sets whatever property is configured as the Name property on the CmAbstractPersistable sub-class."
  name: String
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  "Properties for CmAbstractPersistable"
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
}

"""
Used to add or modify a Change Preprocessor Definition object in a list of definitions.

Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
set and indicates the action that this input object represents. If none
of the fields are set the action defaults to insert.

When the action is taken on an existing object, for example by specifying the updateAction field, the
itemReference sub-field must be specified. Change Preprocessor Definition objects can be referenced by the originalIndex sub-field
of that itemReference object or by the id sub-field.
"""
input CmChangePreprocessorDefinitionInput {
  changePreprocessorAction: ObjectReferenceInput
  "Indicates this input object represents a deletion of an existing change preprocessor definition."
  deleteAction: DeleteDependentActionInput
  displayName: String
  """
  Indicates this input object represents an insertion of a new change preprocessor definition.
  It is not necessary to set the classIdentifier sub-field as there is only one CmChangePreprocessor class.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  isEnabled: Boolean
  "Indicates this input object represents a move of an existing change preprocessor definition."
  moveAction: MoveDependentActionInput
  "Indicates this input object represents an update of an existing change preprocessor definition."
  updateAction: UpdateDependentActionInput
}

"""
Represents a list of change preprocessor definitions.
Either the replace field or modify field must be specified. The replace field is equivalent to deleting
all existing change preprocessor definitions and inserting some number of new ones.
Only the insertAction field of each CmChangePreprocessorDefinitionInput object can be specified if the list
of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
as it is the default action. Passing a list of objects to the modify field allows a finer grain
manipulation of the list of objects.
"""
input CmChangePreprocessorDefinitionListInput {
  modify: [CmChangePreprocessorDefinitionInput!]
  replace: [CmChangePreprocessorDefinitionInput!]
}

"""
Used to add or modify a CmLocalGroupMember object in a list of members.

 Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
 set and indicates the action that this input object represents. If none
 of the fields are set the action defaults to insert.

 When the action is taken on an existing object, for example by specifying the updateAction field, the
 itemReference sub-field must be specified. Local group member objects can be referenced by the originalIndex sub-field
 of that itemReference object or by the id sub-field.
"""
input CmLocalGroupMemberInput {
  "Indicates this input object represents a deletion of an existing local group member."
  deleteAction: DeleteDependentActionInput
  """
  Indicates this input object represents an insertion of a new local group member.
  It is not necessary to set the classIdentifier sub-field as there is only one member class.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  "Reference to the security principal -- user or group -- that is the member."
  memberPrincipal: ObjectReferenceInput
  "Indicates this input object represents a move of an existing local group member."
  moveAction: MoveDependentActionInput
  "Indicates this input object represents an update of an existing local group member."
  updateAction: UpdateDependentActionInput
}

"""
An input type that represents a list of members in a local group.
 Either the replace field or modify field must be specified. The replace field is equivalent to deleting
 all existing members and inserting some number of new members.
 Only the insertAction field of each CmLocalGroupMemberInput object can be specified if the list
 of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
 as it is the default action. Passing a list of objects to the modify field allows a finer grain
 manipulation of the list of objects.
"""
input CmLocalGroupMemberListInput {
  modify: [CmLocalGroupMemberInput!]
  replace: [CmLocalGroupMemberInput!]
}

"Specifies properties when creating or updating a CmLocalGroup object."
input CmLocalGroupPropertiesInput {
  displayName: String
  groupMembers: CmLocalGroupMemberListInput
  groupName: String
  objectProperties: [ObjectPropertyInput!]
  properties: [PropertyIdentifierAndScalarValue!]
}

"Specifies properties when creating or updating a CmManagedUser object."
input CmManagedUserPropertiesInput {
  displayName: String
  """
  Email address of the managed user.
  This field can only be specified when the managed user is being created.
  """
  email: String
  managedUserStatus: ManagedUserStatus
  """
  The managed realm that holds this managed user.
  This field can only be specified when the managed user is being created.
  """
  realm: ObjectReferenceInput
}

"""
Used to add or modify a Role Access Definition object in a list of definitions.

Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
set and indicates the action that this input object represents. If none
of the fields are set the action defaults to insert.

When the action is taken on an existing object, for example by specifying the updateAction field, the
itemReference sub-field must be specified. Role Access Definition objects can be referenced by the originalIndex sub-field
of that itemReference object or by the id sub-field.
"""
input CmRoleAccessDefinitionInput {
  accessMask: Int
  controlledClass: ObjectReferenceInput
  "Indicates this input object represents a deletion of an existing role access definition."
  deleteAction: DeleteDependentActionInput
  """
  Indicates this input object represents an insertion of a new role access definition.
  It is not necessary to set the classIdentifier sub-field as there is only one CmRoleAccessDefinition class.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  "Indicates this input object represents a move of an existing role access definition."
  moveAction: MoveDependentActionInput
  "Indicates this input object represents an update of an existing role access definition."
  updateAction: UpdateDependentActionInput
}

"""
Represents a list of role access definitions.
Either the replace field or modify field must be specified. The replace field is equivalent to deleting
all existing role access definitions and inserting some number of new ones.
Only the insertAction field of each CmRoleAccessDefinitionInput object can be specified if the list
of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
as it is the default action. Passing a list of objects to the modify field allows a finer grain
manipulation of the list of objects.
"""
input CmRoleAccessDefinitionListInput {
  modify: [CmRoleAccessDefinitionInput!]
  replace: [CmRoleAccessDefinitionInput!]
}

"An input type when creating or updating a CmThumbnail object."
input CmThumbnailPropertiesInput {
  elementSequenceNumber: Int
  image: HexString
  inputDocument: ObjectReferenceInput
  mimeType: String
  "Name sets whatever property is configured as the Name property on the CmThumbnail class."
  name: String
  objectProperties: [ObjectPropertyInput!]
  "Properties for CmThumbnail"
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
}

"""
An input type that represents a list of Content Elements (which can be ContentReference or ContentTransfer).
 Either the replace field or modify field must be specified. The replace field is equivalent to deleting
 all existing content elements and inserting some number of new content elements.
 Only the insertAction field of each BaseContentElementInput object can be specified if the list
 of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
 as it is the default action. Passing a list of objects to the modify field allows a finer grain
 manipulation of the list of objects.
"""
input ContentElementListInput {
  modify: [BaseContentElementInput!]
  replace: [BaseContentElementInput!]
}

"An input type when creating or updating a CustomObject object."
input CustomObjectPropertiesInput {
  cmRetentionDate: DateTime
  "Name sets whatever property is configured as the Name property on the CustomObject class"
  name: String
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  "Properties for CustomObject."
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
  securityFolder: ObjectReferenceInput
  securityPolicy: ObjectReferenceInput
}

"""
An input type that represents an action to delete an existing object from a list of dependent objects.
 Content Elements and Permissions are examples of dependent objects in the API as they are
 dependent on a parent object such as a Document.
"""
input DeleteDependentActionInput {
  "References the existing dependent object being deleted."
  itemReference: DependentItemReferenceInput!
}

"""
An input type that references an existing object in a list of dependent objects. Only one of these
 fields needs to be specified to reference the existing object. A field may or may not apply to a
 particular type of dependent object. Refer to documentation for the parent List input type
 where passing the list of dependent objects for the ways in which an item can be referenced.
 An item in the list can always be referenced by index.
"""
input DependentItemReferenceInput {
  """
  References the existing item by its Id property value. This field only applies to those
  types of dependent objects that have a unique Id property.
  """
  id: ID
  "References the existing item by some other identifier, for example a symbolic name."
  identifier: String
  """
  References the existing item by its index in the list. This index is the original index before
  any other edits have been made to the list.
  """
  originalIndex: Int
  """
  References the existing item by a sequence number. This value only applies to ContentElement objects
  which have a unique ElementSequenceNumber. This is a generic input type that applies to many types
  of dependent objects but provides this field as a convenience when referencing content elements.
  """
  sequenceNumber: Int
}

"""
An input type that represents a dependent object using generic data like a class identifier and its properties.

 Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
 set and indicates the action that this input object represents. If none
 of the fields are set the action defaults to insert.

 When the action is taken on an existing object, for example by specifying the updateAction field, the
 itemReference sub-field must be specified. What sub-fields of that itemReference object can be used to reference
 an existing object depends on the type of dependent object. In general the id field can be used if the dependent
 object has a unique Id property. If there is another type of identifier that can be specified in the identifier field,
 there are more specific input types defined in the schema for dealing with those types of objects and the identifier
 is documented there. The sequenceNumber field is only applicable when dealing with content elements. The originalIndex
 field can always be used to reference an existing dependent object.
"""
input DependentObjectInput {
  "Indicates this input object represents a deletion of an existing dependent object."
  deleteAction: DeleteDependentActionInput
  """
  Indicates this input object represents an insertion of a new dependent object.
  This is also the default action if none of the action fields are specified. In that case, the insertAction
  can only be omitted if the classIdentifier can be implied (for example by defaulting to the required-class
  setting of the List property).
  """
  insertAction: InsertDependentActionInput
  "Indicates this input object represents a move of an existing dependent object."
  moveAction: MoveDependentActionInput
  objectProperties: [ObjectPropertyInput!]
  properties: [PropertyIdentifierAndScalarValue!]
  "Indicates this input object represents an update of an existing dependent object."
  updateAction: UpdateDependentActionInput
}

"""
An input type that represents a list of generic dependent objects.
 Either the replace field or modify field must be specified. The replace field is equivalent to deleting
 all existing objects and inserting some number of new objects.
 Only the insertAction field of each DependentObjectInput object can be specified if the list
 of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
 as it is the default action. Passing a list of objects to the modify field allows a finer grain
 manipulation of the list of objects.
"""
input DependentObjectListInput {
  modify: [DependentObjectInput!]
  replace: [DependentObjectInput!]
}

"An input type when creating or updating a Document object."
input DocumentPropertiesInput {
  cmRetentionDate: DateTime
  compoundDocumentState: CompoundDocumentState
  """
  Content can be specified if this represents a Reservation document or document creation.
  
  Content is matched with a part of a multi-part form submission using a variable and its variable name.
  
  The retrieval name is also taken from the name in the part of the multi-part form.
  
  Supports a single content element streamed from one part of a multi-part form submission.
  """
  content: String
  """
  Content can also be multiple content elements. Elements can be ContentReference or ContentTransfer.
  
  ContentTransfer is streamed from a part of a multi-part form submission.
  """
  contentElements: ContentElementListInput
  documentLifecyclePolicy: ObjectReferenceInput
  "Mime type can be specified if this is a Reservation document or document creation."
  mimeType: String
  "Name sets DocumentTitle or whatever property is configured as the Name property."
  name: String
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  "Properties for Document."
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
  securityFolder: ObjectReferenceInput
  securityPolicy: ObjectReferenceInput
  storageArea: ObjectReferenceInput
  storagePolicy: ObjectReferenceInput
}

"An input type that represents the input fields for an external event action."
input EevBaseExternalEventActionPropertiesInput {
  cmTransactionTimeout: Int
  descriptiveText: String
  eevEventReceiverCredentials: EevEventReceiverCredentialsInput
  eevExternalEventReceiverURL: String
  eevReceiverRegistrationIdentifier: String
  isEnabled: Boolean
  name: String
  permissions: PermissionListInput
  type: EevExternalEventActionSubType!
}

"An input type that represents the input fields for an external event subscription."
input EevBaseExternalEventSubscriptionInput {
  changeMode: ChangeMode!
  descriptiveText: String
  filterExpression: String
  filteredProperty: String
  "Id is required for an update. Can be supplied when adding a subscription to predefine the GUID of the new subscription."
  id: ID
  isEnabled: Boolean
  "Name is required if changeMode is ADD."
  name: String
  owner: String
  permissions: PermissionListInput
  priority: Int
  "If subscriptionType is CLASS, this represents an additional sub-setting for class subscription."
  subExternalEventClassSubscription: EevSubExternalEventClassSubscriptionInput
  subscribedEventClassIdentifiers: [String!]
  "SubscriptionTarget is required when adding a new subscription."
  subscriptionTarget: ObjectReferenceInput
  type: SubscriptionType!
  userString: String
}

"An input type that represents the input fields for an event receiver credential."
input EevEventReceiverCredentialsInput {
  credentialSecret: String!
  credentialType: EevCredentialType!
}

"An input type that represents the filter options for an external event action."
input EevExternalEventActionsFilterInput {
  eevExternalEventReceiverURL: String
  eevReceiverRegistrationIdentifier: String
}

"An input type that represents the input fields for updating external event subscriptions."
input EevExternalEventSubscriptionSetInput {
  changes: [EevBaseExternalEventSubscriptionInput!]
  deletions: [ID!]
}

"An input type that represents the option for external event class subscriptions."
input EevSubExternalEventClassSubscriptionInput {
  includeSubclasses: Boolean
}

"An input type when creating or updating a Folder object."
input FolderPropertiesInput {
  cmRetentionDate: DateTime
  inheritParentPermissions: Boolean
  "Name sets FolderName property."
  name: String
  objectProperties: [ObjectPropertyInput!]
  owner: String
  parent: ObjectReferenceInput
  permissions: PermissionListInput
  "Properties for Folder."
  properties: [PropertyIdentifierAndScalarValue!]
  replicationGroup: ObjectReferenceInput
  securityPolicy: ObjectReferenceInput
}

"""
An input type that represents an action to insert a new object in a list of dependent objects.
 Content Elements and Permissions are examples of dependent objects in the API as they are
 dependent on a parent object such as a Document.
"""
input InsertDependentActionInput {
  """
  Identifies the class of the new dependent object being inserted. This is an optional
  field. The class of the object is implied in many scenarios. For example the required-class
  setting of the property holding a list of dependent objects may determine the class or
  the default class of each object.
  """
  classIdentifier: String
  """
  Indicates the index at which to place the new object in the list. This only needs to be specified
  if direct control over the position of objects is desired. The default when inserting a new object
  is to append it to the end of the list.
  """
  newIndex: Int
}

"""
Used to add or modify a Localized String object in a list of localized strings.

Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
set and indicates the action that this input object represents. If none
of the fields are set the action defaults to insert.

When the action is taken on an existing object, for example by specifying the updateAction field, the
itemReference sub-field must be specified. Localized String objects can be referenced by the originalIndex sub-field
of that itemReference object or by the id sub-field.
"""
input LocalizedStringInput {
  "Indicates this input object represents a deletion of an existing localized string."
  deleteAction: DeleteDependentActionInput
  """
  Indicates this input object represents an insertion of a new localized string.
  It is not necessary to set the classIdentifier sub-field as there is only one LocalizedString class.
  This is also the default action if none of the action fields are specified
  """
  insertAction: InsertDependentActionInput
  localeName: String
  localizedText: String
  "Indicates this input object represents a move of an existing localized string."
  moveAction: MoveDependentActionInput
  "Indicates this input object represents an update of an existing localized string."
  updateAction: UpdateDependentActionInput
}

"""
An input type that represents a list of localized string objects.
Either the replace field or modify field must be specified. The replace field is equivalent to deleting
all existing localized strings and inserting some number of new localized strings.
Only the insertAction field of each LocalizedStringInput object can be specified if the list
of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
as it is the default action. Passing a list of objects to the modify field allows a finer grain
manipulation of the list of objects.
"""
input LocalizedStringListInput {
  modify: [LocalizedStringInput!]
  replace: [LocalizedStringInput!]
}

"""
An input type that represents an action to move an existing object in a list of dependent objects.
 Other updates to the object can be made at the same time as it is being moved.
 Content Elements and Permissions are examples of dependent objects in the API as they are
 dependent on a parent object such as a Document.
"""
input MoveDependentActionInput {
  """
  References the existing dependent object to be moved. Because the purpose of this action is
  to directly control the position of the object in the list, you would typically reference the
  object by its original index in the list.
  """
  itemReference: DependentItemReferenceInput!
  "Indicates the new index in the list where the object is being moved."
  newIndex: Int!
}

"An input type to specify the identifier and value of a property. The value can be single value, multiple values, reference to another independent object or objects dependent on the current object."
input ObjectPropertyInput {
  binaryListValue: [HexString!]
  binaryValue: HexString
  booleanListValue: [Boolean!]
  booleanValue: Boolean
  """
  A value of type content only applies to objects of type ContentTransfer.  The property identifier should
  be "Content" and the actual content value is matched with a part of a multi-part form submission using
  a variable and its variable name.  The retrieval name is also taken from the name in the part of the
  multi-part form.
  """
  contentValue: String
  dateTimeListValue: [DateTime!]
  dateTimeValue: DateTime
  dependentObjectListValue: DependentObjectListInput
  floatListValue: [Float!]
  floatValue: Float
  idListValue: [ID!]
  idValue: ID
  identifier: ID!
  intListValue: [Int!]
  intValue: Int
  "For setting the value of a single-value OVP."
  objectReferenceValue: ObjectReferenceInput
  stringListValue: [String!]
  stringValue: String
}

"An input type to specify identifier information about an object. The fields primarily enable you to specify an object's identifier, as well as its associated class and object store identifiers."
input ObjectReferenceInput {
  classIdentifier: String
  identifier: String!
  repositoryIdentifier: String
}

"""
An input type that represents a list of permissions for an object.
 Either the replace field or modify field must be specified. The replace field is equivalent to deleting
 all existing permissions and inserting some number of new permissions.
 Only the insertAction field of each BasePermissionInput object can be specified if the list
 of objects is passed in the replace field. The insertAction sub-field of those objects is also optional
 as it is the default action. Passing a list of objects to the modify field allows a finer grain
 manipulation of the list of objects.

Only AccessPermission, DelegatedAccessPermission and RolePermission are supported.
"""
input PermissionListInput {
  modify: [BasePermissionInput!]
  replace: [BasePermissionInput!]
}

"""
Used to add or modify a property definition in a class definition.

Only one of the fields -- insertAction, updateAction, moveAction or deleteAction -- can be
set and indicates the action that this input object represents. If none
of the fields are set the action defaults to insert.

When the action is taken on an existing object, for example by specifying the updateAction field, the
itemReference sub-field must be specified. Property definition objects can be referenced by the originalIndex sub-field
of that itemReference object or by the identifier sub-field. For the identifier sub-field, pass in the Primary Id or Symbolic Name
of the property definition. The Primary Id matches the Id of the property template associated with this property definition.
"""
input PropertyDefinitionInput {
  aliasIds: [ID!]
  "References a PropertyTemplate object corresponding to the event property to which this property should be audited as."
  auditAs: ObjectReferenceInput
  choiceList: ObjectReferenceInput
  copyToReservation: Boolean
  "Indicates this input object represents a deletion of an existing property definition."
  deleteAction: DeleteDependentActionInput
  """
  Indicates this input object represents an insertion of a new property definition.
  This is also the default action if none of the action fields are specified.
  The classIdentifier sub-field does not need to be specified as the class of property definition is implied
  by the propertyTemplate field, which is required when inserting a new property definition. If the classIdentifier
  is specified and it does not match the class implied by the property template, an error will be raised.
  """
  insertAction: InsertDependentActionInput
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  "Indicates this input object represents a move of an existing property definition."
  moveAction: MoveDependentActionInput
  """
  The property template associated with this property definition. This is required when a new property
  definition is being inserted but does not need to be specified otherwise. If it is specified for an
  existing property definition and does not match the current property template, an error will be raised.
  
  When inserting a new property definition, the property template implies the type of property definition
  so no type or class needs to be specified.
  """
  propertyTemplate: ObjectReferenceInput
  settability: PropertySettability
  subPropertyDefinitionBinary: SubPropertyDefinitionBinaryInput
  subPropertyDefinitionBoolean: SubPropertyDefinitionBooleanInput
  subPropertyDefinitionDateTime: SubPropertyDefinitionDateTimeInput
  subPropertyDefinitionFloat64: SubPropertyDefinitionFloat64Input
  subPropertyDefinitionId: SubPropertyDefinitionIdInput
  subPropertyDefinitionInteger32: SubPropertyDefinitionInteger32Input
  subPropertyDefinitionObject: SubPropertyDefinitionObjectInput
  subPropertyDefinitionString: SubPropertyDefinitionStringInput
  "Indicates this input object represents an update of an existing property definition."
  updateAction: UpdateDependentActionInput
}

"""
An input type that represents a list of property definitions in a class definition.
Only the modify field is supported with this kind of dependent object list.
The list of property definitions can only be modifed. It cannot be replaced.
The list of PropertyDefinitionInput objects are used to add new property definitions to a class definition,
modify existing property definitions that are directly applied to a class definition or
modify certain attributes of property definitions inherited from a super class.
"""
input PropertyDefinitionListInput {
  modify: [PropertyDefinitionInput!]
}

"An input type for the property descriptions filter options for a class description."
input PropertyDescriptionFilter {
  hasChoiceList: Boolean
  isHidden: Boolean
  isOrderable: Boolean
  isReadOnly: Boolean
  isSearchable: Boolean
  isSelectable: Boolean
  isSystemOwned: Boolean
  isValueRequired: Boolean
  name: String
}

"Specifies properties when creating or updating a Property Template."
input PropertyTemplatePropertiesInput {
  aliasIds: [ID!]
  "References another PropertyTemplate object corresponding to the event property to which this property should be audited as."
  auditAs: ObjectReferenceInput
  cardinality: Cardinality
  choiceList: ObjectReferenceInput
  "dateCreated and dateLastModified can only be set by users who have been granted privileged write access (AccessRight.PRIVILEGED_WRITE)"
  dateCreated: DateTime
  dateLastModified: DateTime
  descriptiveTexts: LocalizedStringListInput
  displayNames: LocalizedStringListInput
  isHidden: Boolean
  isNameProperty: Boolean
  isValueRequired: Boolean
  modificationAccessRequired: Int
  objectProperties: [ObjectPropertyInput!]
  owner: String
  permissions: PermissionListInput
  persistenceType: PropertyPersistence
  properties: [PropertyIdentifierAndScalarValue!]
  propertyDisplayCategory: String
  replicationGroup: ObjectReferenceInput
  requiresUniqueElements: Boolean
  settability: PropertySettability
  subPropertyTemplateBinaryProperties: SubPropertyTemplateBinaryPropertiesInput
  subPropertyTemplateBooleanProperties: SubPropertyTemplateBooleanPropertiesInput
  subPropertyTemplateDateTimeProperties: SubPropertyTemplateDateTimePropertiesInput
  subPropertyTemplateFloat64Properties: SubPropertyTemplateFloat64PropertiesInput
  subPropertyTemplateIdProperties: SubPropertyTemplateIdPropertiesInput
  subPropertyTemplateInteger32Properties: SubPropertyTemplateInteger32PropertiesInput
  subPropertyTemplateObjectProperties: SubPropertyTemplateObjectPropertiesInput
  subPropertyTemplateStringProperties: SubPropertyTemplateStringPropertiesInput
  symbolicName: String
}

"Defines filter parameters when searching for a list of realms"
input RealmFilterInput {
  category: String
  realmDirectoryType: RealmDirectoryTypeEnum
}

"An input type that represents available search input fields that can be specified within a query."
input RepositoryObjectSearchInput {
  from: String!
  options: String
  orderBy: String
  where: String
}

"An input type that represents access permission to a grantee."
input SubAccessPermissionInput {
  accessType: AccessType!
  granteeName: String!
}

"An input type for applying a security template action."
input SubApplySecurityTemplateActionInput {
  applyStateId: ID
}

"An input type for a change class action."
input SubChangeClassActionInput {
  newClass: String
}

"An input type for a change state action."
input SubChangeStateActionInput {
  lifecycleAction: LifecycleChangeFlags
}

"An input type for a Document checkin action."
input SubCheckinActionInput {
  autoClassify: Boolean
  checkinMinorVersion: Boolean
}

"An input type for a Document checkout action."
input SubCheckoutActionInput {
  reservationClass: String
  reservationId: ID
  reservationObjectProperties: [ObjectPropertyInput!]
  reservationProperties: [PropertyIdentifierAndScalarValue!]
  reservationType: ReservationType
}

"Specifies additional properties specifically when creating or updating a Class Definition for a CmRole sub-class."
input SubCmRoleClassDefinitionPropertiesInput {
  roleAccessDefinitions: CmRoleAccessDefinitionListInput
  roleMembershipAction: ObjectReferenceInput
}

"An input type that represents a ContentReference."
input SubContentReferenceInput {
  contentLocation: String
}

"An input type that represents a ContentTransfer."
input SubContentTransferInput {
  "Content is matched with a part of a multi-part form submission using a variable and its variable name."
  content: String
  """
  The retrieval name  of the content element. If present this is used to set the RetrievalName property otherwise
   it is taken from the name in the part of the multi-part form. This is used as the retrieval name of the content,
   and typically has an extension that matches the content.
  """
  retrievalName: String
}

"An input type for an object create action."
input SubCreateActionInput {
  autoUniqueContainmentName: Boolean
  classId: String
  defineSecurityParentage: Boolean
  objectId: String
  reservationType: ReservationType
  versionSeriesId: ID
}

"An input type that represents a delegated access permission from a delegating user to a delegate user."
input SubDelegatedAccessPermissionInput {
  delegateName: String!
  delegatingUserName: String
}

"An input type for an install addon action."
input SubInstallAddOnActionInput {
  addOnId: String
}

"An input type for a lock action."
input SubLockActionInput {
  owner: String
  timeOut: Int
}

"An input type for a move content action."
input SubMoveContentActionInput {
  moveAllVersions: Boolean
  targetPolicyId: ID
}

"Specifies additional properties specifically when creating or updating a Binary type of Property Definition."
input SubPropertyDefinitionBinaryInput {
  maximumLengthBinary: Int
  propertyDefaultBinary: HexString
}

"Specifies additional properties specifically when creating or updating a Boolean type of Property Definition."
input SubPropertyDefinitionBooleanInput {
  propertyDefaultBoolean: Boolean
}

"Specifies additional properties specifically when creating or updating a Date-Time type of Property Definition."
input SubPropertyDefinitionDateTimeInput {
  isDateOnly: Boolean
  propertyDefaultDateTime: DateTime
  propertyMaximumDateTime: DateTime
  propertyMinimumDateTime: DateTime
}

"Specifies additional properties specifically when creating or updating a Floating Point type of Property Definition."
input SubPropertyDefinitionFloat64Input {
  propertyDefaultFloat64: Float
  propertyMaximumFloat64: Float
  propertyMinimumFloat64: Float
}

"Specifies additional properties specifically when creating or updating an Id type of Property Definition."
input SubPropertyDefinitionIdInput {
  propertyDefaultId: ID
}

"Specifies additional properties specifically when creating or updating an Integer type of Property Definition."
input SubPropertyDefinitionInteger32Input {
  propertyDefaultInteger32: Int
  propertyMaximumInteger32: Int
  propertyMinimumInteger32: Int
}

"Specifies additional properties specifically when creating or updating an Object type of Property Definition."
input SubPropertyDefinitionObjectInput {
  propertyDefaultObject: ObjectReferenceInput
  reflectivePropertyId: ID
  requiredClassId: ID
  targetAccessRequired: Int
}

"Specifies additional properties specifically when creating or updating a String type of Property Definition."
input SubPropertyDefinitionStringInput {
  isCBREnabled: Boolean
  maximumLengthString: Int
  propertyDefaultString: String
}

"Specifies additional properties specifically when creating or updating a Binary type of Property Template."
input SubPropertyTemplateBinaryPropertiesInput {
  isReadProtected: Boolean
  maximumLengthBinary: Int
  propertyDefaultBinary: HexString
}

"Specifies additional properties specifically when creating or updating a Boolean type of Property Template."
input SubPropertyTemplateBooleanPropertiesInput {
  propertyDefaultBoolean: Boolean
}

"Specifies additional properties specifically when creating or updating a Date-time type of Property Template."
input SubPropertyTemplateDateTimePropertiesInput {
  isDateOnly: Boolean
  propertyDefaultDateTime: DateTime
  propertyMaximumDateTime: DateTime
  propertyMinimumDateTime: DateTime
}

"Specifies additional properties specifically when creating or updating a floating point type of Property Template."
input SubPropertyTemplateFloat64PropertiesInput {
  propertyDefaultFloat64: Float
  propertyMaximumFloat64: Float
  propertyMinimumFloat64: Float
}

"Specifies additional properties specifically when creating or updating an Id type of Property Template."
input SubPropertyTemplateIdPropertiesInput {
  propertyDefaultId: ID
}

"Specifies additional properties specifically when creating or updating an integer type of Property Template."
input SubPropertyTemplateInteger32PropertiesInput {
  propertyDefaultInteger32: Int
  propertyMaximumInteger32: Int
  propertyMinimumInteger32: Int
}

"Specifies additional properties specifically when creating or updating an object type of Property Template."
input SubPropertyTemplateObjectPropertiesInput {
  allowsForeignObject: Boolean
}

"Specifies additional properties specifically when creating or updating a string type of Property Template."
input SubPropertyTemplateStringPropertiesInput {
  maximumLengthString: Int
  propertyDefaultString: String
  usesLongColumn: Boolean
}

"An input type for a raise event action."
input SubRaiseEventActionInput {
  classId: String
  eventObjectProperties: [ObjectPropertyInput!]
  eventProperties: [PropertyIdentifierAndScalarValue!]
}

"An input type for a recover action."
input SubRecoverActionInput {
  recoveryObjectProperties: [ObjectPropertyInput!]
  recoveryProperties: [PropertyIdentifierAndScalarValue!]
}

"Specifies additional properties specifically when creating or updating a Class Definition for a Replicable sub-class."
input SubReplicableClassDefinitionPropertiesInput {
  subCmRoleClassDefinitionProperties: SubCmRoleClassDefinitionPropertiesInput
}

"An input type that represents a role based permission referenced via a role instance."
input SubRolePermissionInput {
  role: ObjectReferenceInput!
}

"Specifies additional properties specifically when creating or updating a Class Definition for a Subscribable sub-class."
input SubSubscribableClassDefinitionPropertiesInput {
  auditDefinitions: AuditDefinitionListInput
  changePreprocessorDefinitions: CmChangePreprocessorDefinitionListInput
  subReplicableClassDefinitionProperties: SubReplicableClassDefinitionPropertiesInput
}

"""
An input type that represents an action to update an existing object in a list of dependent objects.
 Content Elements and Permissions are examples of dependent objects in the API as they are
 dependent on a parent object such as a Document.
"""
input UpdateDependentActionInput {
  "References the existing dependent object being updated."
  itemReference: DependentItemReferenceInput!
}
